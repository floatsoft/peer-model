[
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "console.log(Infinity          ); /* Infinity */  \nconsole.log(Infinity + 1      ); /* Infinity */  \nconsole.log(Math.pow(10, 1000)); /* Infinity */  \nconsole.log(Math.log(0)       ); /* -Infinity */  \nconsole.log(1 / Infinity      ); /* 0 */  \nconsole.log(1 / 0             ); /* Infinity */ \n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "NaN === NaN;        // false\nNumber.NaN === NaN; // false\nisNaN(NaN);         // true\nisNaN(Number.NaN);  // true\n\nfunction valueIsNaN(v) { return v !== v; }\nvalueIsNaN(1);          // false\nvalueIsNaN(NaN);        // true\nvalueIsNaN(Number.NaN); // true\n",
    "isNaN('hello world');        // true\nNumber.isNaN('hello world'); // false\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "//  DON'T DO THIS\n\n//  logs \"foo string\"\n(function() { \n  var undefined = 'foo'; \n  console.log(undefined, typeof undefined); \n})();\n\n//  logs \"foo string\"\n(function(undefined) { \n  console.log(undefined, typeof undefined); \n})('foo');\n",
    "var x;\nif (x === undefined) {\n  // these statements execute\n}\nelse {\n  // these statements do not execute\n}\n",
    "var x;\nif (typeof x === 'undefined') {\n   // these statements execute\n}\n",
    "//  x has not been declared before\nif (typeof x === 'undefined') { //  evaluates to true without errors\n   //  these statements execute\n}\n\nif (x === undefined) { //  throws a ReferenceError\n\n}\n",
    "if ('x' in window) {\n  //  these statements execute only if x is defined globally \n}",
    "var x;\nif (x === void 0) {\n  //  these statements execute\n}\n\n//  y has not been declared before\nif (y === void 0) {\n  //  throws Uncaught ReferenceError: y is not defined\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
    "var getGlobal = function () { \n  if (typeof self !== 'undefined') { return self; } \n  if (typeof window !== 'undefined') { return window; } \n  if (typeof global !== 'undefined') { return global; } \n  throw new Error('unable to locate global object'); \n}; \n\nvar globals = getGlobal(); \n\nif (typeof globals.setTimeout !== 'function') { \n  // no setTimeout in this environment! \n}\n",
    "if (typeof globalThis.setTimeout !== 'function') {\n  // no setTimeout in this environment!\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
    "eval(new String('2 + 2')); // returns a String object containing \"2 + 2\"\neval('2 + 2');             // returns 4\n",
    "var expression = new String('2 + 2');\neval(expression.toString());            // returns 4\n",
    "function test() {\n  var x = 2, y = 4;\n  console.log(eval('x + y'));  // Direct call, uses local scope, result is 6\n  var geval = eval; // equivalent to calling eval in the global scope\n  console.log(geval('x + y')); // Indirect call, uses global scope, throws ReferenceError because `x` is undefined\n  (0, eval)('x + y'); // another example of Indirect call\n}\n",
    "function looseJsonParse(obj){\n    return eval(\"(\" + obj + \")\");\n}\nconsole.log(looseJsonParse(\n   \"{a:(4-1), b:function(){}, c:new Date()}\"\n))\n",
    "function looseJsonParse(obj){\n    return Function('\"use strict\";return (' + obj + ')')();\n}\nconsole.log(looseJsonParse(\n   \"{a:(4-1), b:function(){}, c:new Date()}\"\n))\n",
    "function Date(n){\n    return [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"][n%7 || 0];\n}\nfunction looseJsonParse(obj){\n    return eval(\"(\" + obj + \")\");\n}\nconsole.log(looseJsonParse(\n   \"{a:(4-1), b:function(){}, c:new Date()}\"\n))\n",
    "function Date(n){\n    return [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"][n%7 || 0];\n}\nfunction runCodeWithDateFunction(obj){\n    return Function('\"use strict\";return (' + obj + ')')()(\n        Date\n    );\n}\nconsole.log(runCodeWithDateFunction(\n   \"function(Date){ return Date(5) }\"\n))\n",
    "console.log(Function('\"use strict\";return(function(a){return a(5)})')()(function(a){\nreturn\"Monday Tuesday Wednesday Thursday Friday Saturday Sunday\".split(\" \")[a%7||0]}));",
    "var obj = { a: 20, b: 30 };\nvar propName = getPropName();  // returns \"a\" or \"b\"\n\neval( 'var result = obj.' + propName );\n",
    "var obj = { a: 20, b: 30 };\nvar propName = getPropName();  // returns \"a\" or \"b\"\nvar result = obj[ propName ];  //  obj[ \"a\" ] is the same as obj.a",
    "var obj = {a: {b: {c: 0}}};\nvar propPath = getPropPath();  // returns e.g. \"a.b.c\"\n\neval( 'var result = obj.' + propPath );\n",
    "function getDescendantProp(obj, desc) {\n  var arr = desc.split('.');\n  while (arr.length) {\n    obj = obj[arr.shift()];\n  }\n  return obj;\n}\n\nvar obj = {a: {b: {c: 0}}};\nvar propPath = getPropPath();  // returns e.g. \"a.b.c\"\nvar result = getDescendantProp(obj, propPath);",
    "function setDescendantProp(obj, desc, value) {\n  var arr = desc.split('.');\n  while (arr.length > 1) {\n    obj = obj[arr.shift()];\n  }\n  return obj[arr[0]] = value;\n}\n\nvar obj = {a: {b: {c: 0}}};\nvar propPath = getPropPath();  // returns e.g. \"a.b.c\"\nvar result = setDescendantProp(obj, propPath, 1);  // obj.a.b.c will now be 1",
    "// instead of setTimeout(\" ... \", 1000) use:\nsetTimeout(function() { ... }, 1000); \n\n// instead of elt.setAttribute(\"onclick\", \"...\") use:\nelt.addEventListener('click', function() { ... } , false); ",
    "var x = 2;\nvar y = 39;\nvar z = '42';\neval('x + y + 1'); // returns 42\neval(z);           // returns 42 \n",
    "var x = 5;\nvar str = \"if (x == 5) {console.log('z is 42'); z = 42;} else z = 0;\";\n\nconsole.log('z is ', eval(str));",
    "var x = 5;\nvar str = \"if (x == 5) {console.log('z is 42'); z = 42; x = 420; } else z = 0;\"; \n\nconsole.log('x is ', eval(str)); // z is 42  x is 420 \n",
    "var str = 'if ( a ) { 1 + 1; } else { 1 + 2; }';\nvar a = true;\nvar b = eval(str);  // returns 2\n \nconsole.log('b is : ' + b);\n\na = false;\nb = eval(str);  // returns 3\n\nconsole.log('b is : ' + b);",
    "var fctStr1 = 'function a() {}'\nvar fctStr2 = '(function a() {})'\nvar fct1 = eval(fctStr1)  // return undefined\nvar fct2 = eval(fctStr2)  // return a function\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
    "isFinite(Infinity);  // false\nisFinite(NaN);       // false\nisFinite(-Infinity); // false\n\nisFinite(0);         // true\nisFinite(2e64);      // true\nisFinite(910);       // true\n\nisFinite(null);      // true, would've been false with the \n                     // more robust Number.isFinite(null)\n\nisFinite('0');       // true, would've been false with the \n                     // more robust Number.isFinite(\"0\")\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
    "var isNaN = function(value) {\n    var n = Number(value);\n    return n !== n;\n};",
    "isNaN(NaN);       // true\nisNaN(undefined); // true\nisNaN({});        // true\n\nisNaN(true);      // false\nisNaN(null);      // false\nisNaN(37);        // false\n\n// strings\nisNaN('37');      // false: \"37\" is converted to the number 37 which is not NaN\nisNaN('37.37');   // false: \"37.37\" is converted to the number 37.37 which is not NaN\nisNaN(\"37,5\");    // true\nisNaN('123ABC');  // true:  parseInt(\"123ABC\") is 123 but Number(\"123ABC\") is NaN\nisNaN('');        // false: the empty string is converted to 0 which is not NaN\nisNaN(' ');       // false: a string with spaces is converted to 0 which is not NaN\n\n// dates\nisNaN(new Date());                // false\nisNaN(new Date().toString());     // true\n\n// This is a false positive and the reason why isNaN is not entirely reliable\nisNaN('blabla');   // true: \"blabla\" is converted to a number. \n                   // Parsing this as a number fails and returns NaN\n",
    "function increment(x) {\n  if (isNaN(x)) x = 0;\n  return x + 1;\n}\n\n// The same effect with Number.isNaN():\nfunction increment(x) {\n  if (Number.isNaN(Number(x))) x = 0;\n  return x + 1;\n}\n\n// In the following cases for the function's argument x,\n// isNaN(x) is always false, although x is indeed not a\n// number, but can be used as such in arithmetical\n// expressions\nincrement('');            // 1: \"\" is converted to 0\nincrement(new String());  // 1: String object representing an empty string is converted to 0\nincrement([]);            // 1: [] is converted to 0\nincrement(new Array());   // 1: Array object representing an empty array is converted to 0\nincrement('0');           // 1: \"0\" is converted to 0\nincrement('1');           // 2: \"1\" is converted to 1\nincrement('0.1');         // 1.1: \"0.1\" is converted to 0.1\nincrement('Infinity');    // Infinity: \"Infinity\" is converted to Infinity\nincrement(null);          // 1: null is converted to 0\nincrement(false);         // 1: false is converted to 0\nincrement(true);          // 2: true is converted to 1\nincrement(new Date());    // returns current date/time in milliseconds plus 1\n\n// In the following cases for the function's argument x,\n// isNaN(x) is always false and x is indeed a number\nincrement(-1);            // 0\nincrement(-0.1);          // 0.9\nincrement(0);             // 1\nincrement(1);             // 2\nincrement(2);             // 3\n// ... and so on ...\nincrement(Infinity);      // Infinity\n\n// In the following cases for the function's argument x,\n// isNaN(x) is always true and x is really not a number,\n// thus the function replaces it by 0 and returns 1\nincrement(String);            // 1\nincrement(Array);             // 1\nincrement('blabla');          // 1\nincrement('-blabla');         // 1\nincrement(0 / 0);               // 1\nincrement('0 / 0');             // 1\nincrement(Infinity / Infinity); // 1\nincrement(NaN);               // 1\nincrement(undefined);         // 1\nincrement();                  // 1\n\n// isNaN(x) is always the same as isNaN(Number(x)),\n// but the presence of x is mandatory here!\nisNaN(x) == isNaN(Number(x)); // true for every value of x, including x == undefined,\n                              // because isNaN(undefined) == true and Number(undefined) returns NaN,\n                              // but ...\nisNaN() == isNaN(Number());   // false, because isNaN() == true and Number() == 0\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
    "parseFloat(3.14);\nparseFloat('3.14');\nparseFloat('  3.14  ');\nparseFloat('314e-2');\nparseFloat('0.0314E+2');\nparseFloat('3.14some non-digit characters');\nparseFloat({ toString: function() { return \"3.14\" } });\n",
    "parseFloat('FF2');\n",
    "parseFloat(900719925474099267n);\nparseFloat('900719925474099267n');\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
    "parseInt('0xF', 16)\nparseInt('F', 16)\nparseInt('17', 8)\nparseInt(021, 8)\nparseInt('015', 10)    // but `parseInt(015, 10)` will return 13\nparseInt(15.99, 10)\nparseInt('15,123', 10)\nparseInt('FXX123', 16)\nparseInt('1111', 2)\nparseInt('15 * 3', 10)\nparseInt('15e2', 10)\nparseInt('15px', 10)\nparseInt('12', 13)\n",
    "parseInt('Hello', 8)  // Not a number at all\nparseInt('546', 2)    // Digits other than 0 or 1 are invalid for binary radix\n",
    "parseInt('-F', 16)\nparseInt('-0F', 16)\nparseInt('-0XF', 16)\nparseInt(-15.1, 10)\nparseInt('-17', 8)\nparseInt('-15', 10)\nparseInt('-1111', 2)\nparseInt('-15e1', 10)\nparseInt('-12', 13)\n",
    "parseInt(4.7, 10)\nparseInt(4.7 * 1e22, 10)        // Very large number becomes 4\nparseInt(0.00000000000434, 10)  // Very small number becomes 4\n",
    "parseInt('0e0', 16)\n",
    "parseInt('900719925474099267n')\n// 900719925474099300",
    "parseInt('123_456')\n// 123\n",
    "parseInt('0e0')  // 0\nparseInt('08')   // 0, because '8' is not an octal digit.\n",
    "function filterInt(value) {\n  if (/^[-+]?(\\d+|Infinity)$/.test(value)) {\n    return Number(value)\n  } else {\n    return NaN\n  }\n}\n\nconsole.log(filterInt('421'))                // 421\nconsole.log(filterInt('-421'))               // -421\nconsole.log(filterInt('+421'))               // 421\nconsole.log(filterInt('Infinity'))           // Infinity\nconsole.log(filterInt('421e+0'))             // NaN\nconsole.log(filterInt('421hop'))             // NaN\nconsole.log(filterInt('hop1.61803398875'))   // NaN\nconsole.log(filterInt('1.61803398875'))      // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
    "decodeURI('https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B');\n// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
    "decodeURIComponent('JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B');\n// \"JavaScript_шеллы\"\n",
    "try { \n  var a = decodeURIComponent('%E0%A4%A'); \n} catch(e) { \n  console.error(e); \n}\n\n// URIError: malformed URI sequence",
    "function decodeQueryParam(p) {\n  return decodeURIComponent(p.replace(/\\+/g, ' '));\n}\n\ndecodeQueryParam('search+query%20%28correct%29');\n// 'search query (correct)'\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
    "var set1 = \";,/?:@&=+$#\"; // Reserved Characters\nvar set2 = \"-_.!~*'()\";   // Unreserved Marks\nvar set3 = \"ABC abc 123\"; // Alphanumeric Characters + Space\n\nconsole.log(encodeURI(set1)); // ;,/?:@&=+$#\nconsole.log(encodeURI(set2)); // -_.!~*'()\nconsole.log(encodeURI(set3)); // ABC%20abc%20123 (the space gets encoded as %20)\n\nconsole.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24%23\nconsole.log(encodeURIComponent(set2)); // -_.!~*'()\nconsole.log(encodeURIComponent(set3)); // ABC%20abc%20123 (the space gets encoded as %20)\n\n",
    "// high-low pair ok\nconsole.log(encodeURI('\\uD800\\uDFFF'));\n\n// lone high surrogate throws \"URIError: malformed URI sequence\"\nconsole.log(encodeURI('\\uD800'));\n\n// lone low surrogate throws \"URIError: malformed URI sequence\"\nconsole.log(encodeURI('\\uDFFF')); ",
    "function fixedEncodeURI(str) {\n    return encodeURI(str).replace(/%5B/g, '[').replace(/%5D/g, ']');\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
    "var set1 = \";,/?:@&=+$\";  // Reserved Characters\nvar set2 = \"-_.!~*'()\";   // Unescaped Characters\nvar set3 = \"#\";           // Number Sign\nvar set4 = \"ABC abc 123\"; // Alphanumeric Characters + Space\n\nconsole.log(encodeURI(set1)); // ;,/?:@&=+$\nconsole.log(encodeURI(set2)); // -_.!~*'()\nconsole.log(encodeURI(set3)); // #\nconsole.log(encodeURI(set4)); // ABC%20abc%20123 (the space gets encoded as %20)\n\nconsole.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24\nconsole.log(encodeURIComponent(set2)); // -_.!~*'()\nconsole.log(encodeURIComponent(set3)); // %23\nconsole.log(encodeURIComponent(set4)); // ABC%20abc%20123 (the space gets encoded as %20)\n\n",
    "// high-low pair ok\nconsole.log(encodeURIComponent('\\uD800\\uDFFF'));\n\n// lone high surrogate throws \"URIError: malformed URI sequence\"\nconsole.log(encodeURIComponent('\\uD800'));\n\n// lone low surrogate throws \"URIError: malformed URI sequence\"\nconsole.log(encodeURIComponent('\\uDFFF')); \n",
    "function fixedEncodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n  });\n}\n",
    "var fileName = 'my file(2).txt';\nvar header = \"Content-Disposition: attachment; filename*=UTF-8''\" \n             + encodeRFC5987ValueChars(fileName);\n\nconsole.log(header); \n// logs \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n\n\nfunction encodeRFC5987ValueChars(str) {\n    return encodeURIComponent(str).\n        // Note that although RFC3986 reserves \"!\", RFC5987 does not,\n        // so we do not need to escape it\n        replace(/['()]/g, escape). // i.e., %27 %28 %29\n        replace(/\\*/g, '%2A').\n            // The following are not required for percent-encoding per RFC5987, \n            // so we can allow for a little better readability over the wire: |`^\n            replace(/%(?:7C|60|5E)/g, unescape);\n}\n\n// here is an alternative to the above function\nfunction encodeRFC5987ValueChars2(str) {\n  return encodeURIComponent(str).\n    // Note that although RFC3986 reserves \"!\", RFC5987 does not,\n    // so we do not need to escape it\n    replace(/['()*]/g, c => \"%\" + c.charCodeAt(0).toString(16)). // i.e., %27 %28 %29 %2a (Note that valid encoding of \"*\" is %2A\n                                                                 // which necessitates calling toUpperCase() to properly encode)\n    // The following are not required for percent-encoding per RFC5987,\n    // so we can allow for a little better readability over the wire: |`^\n    replace(/%(7C|60|5E)/g, (str, hex) => String.fromCharCode(parseInt(hex, 16)));\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "var x = 10;\n\nfunction createFunction1() {\n    var x = 20;\n    return new Function('return x;'); // this |x| refers global |x|\n}\n\nfunction createFunction2() {\n    var x = 20;\n    function f() {\n        return x; // this |x| refers local |x| above\n    }\n    return f;\n}\n\nvar f1 = createFunction1();\nconsole.log(f1());          // 10\nvar f2 = createFunction2();\nconsole.log(f2());          // 20\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "var x = new Boolean(false);\nif (x) {\n  // this code is executed\n}\n",
    "var x = false;\nif (x) {\n  // this code is not executed\n}\n",
    "var x = Boolean(expression);     // use this...\nvar x = !!(expression);          // ...or this\nvar x = new Boolean(expression); // don't use this!\n",
    "var myFalse = new Boolean(false);   // initial value of false\nvar g = Boolean(myFalse);       // initial value of true\nvar myString = new String('Hello'); // string object\nvar s = Boolean(myString);      // initial value of true\n",
    "var bNoParam = new Boolean();\nvar bZero = new Boolean(0);\nvar bNull = new Boolean(null);\nvar bEmptyString = new Boolean('');\nvar bfalse = new Boolean(false);\n",
    "var btrue = new Boolean(true);\nvar btrueString = new Boolean('true');\nvar bfalseString = new Boolean('false');\nvar bSuLin = new Boolean('Su Lin');\nvar bArrayProto = new Boolean([]);\nvar bObjProto = new Boolean({});\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "let sym1 = Symbol()\nlet sym2 = Symbol('foo')\nlet sym3 = Symbol('foo')\n",
    "Symbol('foo') === Symbol('foo')  // false\n",
    "let sym = new Symbol()  // TypeError\n",
    "let sym = Symbol('foo')\ntypeof sym      // \"symbol\" \nlet symObj = Object(sym)\ntypeof symObj   // \"object\"\n",
    "typeof Symbol() === 'symbol'\ntypeof Symbol('foo') === 'symbol'\ntypeof Symbol.iterator === 'symbol'\n",
    "let obj = {}\n\nobj[Symbol('a')] = 'a'\nobj[Symbol.for('b')] = 'b'\nobj['c'] = 'c'\nobj.d = 'd'\n\nfor (let i in obj) {\n   console.log(i)  // logs \"c\" and \"d\"\n}",
    "JSON.stringify({[Symbol('foo')]: 'foo'})\n// '{}'\n",
    "let sym = Symbol('foo')\nlet obj = {[sym]: 1}\nobj[sym]             // 1\nobj[Object(sym)]     // still 1\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "try {\n  throw new Error('Whoops!')\n} catch (e) {\n  console.error(e.name + ': ' + e.message)\n}\n",
    "try {\n  foo.bar()\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.error(e.name + ': ' + e.message)\n  } else if (e instanceof RangeError) {\n    console.error(e.name + ': ' + e.message)\n  }\n  // ... etc\n}\n",
    "class CustomError extends Error {\n  constructor(foo = 'bar', ...params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(...params)\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CustomError)\n    }\n\n    this.name = 'CustomError'\n    // Custom debugging information\n    this.foo = foo\n    this.date = new Date()\n  }\n}\n\ntry {\n  throw new CustomError('baz', 'bazMessage')\n} catch(e) {\n  console.error(e.name)    //CustomError\n  console.error(e.foo)     //baz\n  console.error(e.message) //bazMessage\n  console.error(e.stack)   //stacktrace\n}",
    "function CustomError(foo, message, fileName, lineNumber) {\n  var instance = new Error(message, fileName, lineNumber);\n  instance.name = 'CustomError';\n  instance.foo = foo;\n  Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(instance, CustomError);\n  }\n  return instance;\n}\n\nCustomError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\n\nif (Object.setPrototypeOf){\n  Object.setPrototypeOf(CustomError, Error);\n} else {\n  CustomError.__proto__ = Error;\n}\n\ntry {\n  throw new CustomError('baz', 'bazMessage');\n} catch(e){\n  console.error(e.name); //CustomError\n  console.error(e.foo); //baz\n  console.error(e.message); //bazMessage\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
    "Promise.any([\n  Promise.reject(new Error(\"some error\")),\n]).catch(e => {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message);                   // \"All Promises rejected\"\n  console.log(e.name);                      // \"AggregateError\"\n  console.log(e.errors);                    // [ Error: \"some error\" ]\n});\n",
    "try {\n  throw new AggregateError([\n    new Error(\"some error\"),\n  ], 'Hello');\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message);                   // \"Hello\"\n  console.log(e.name);                      // \"AggregateError\"\n  console.log(e.errors);                    // [ Error: \"some error\" ]\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "try {\n  throw new EvalError('Hello', 'someFile.js', 10);\n} catch (e) {\n  console.log(e instanceof EvalError); // true\n  console.log(e.message);              // \"Hello\"\n  console.log(e.name);                 // \"EvalError\"\n  console.log(e.fileName);             // \"someFile.js\"\n  console.log(e.lineNumber);           // 10\n  console.log(e.columnNumber);         // 0\n  console.log(e.stack);                // \"@Scratchpad/2:2:9\\n\"\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "function check(n)\n{\n    if( !(n >= -500 && n <= 500) )\n    {\n        throw new RangeError(\"The argument must be between -500 and 500.\")\n    }\n}\n\ntry\n{\n    check(2000)\n}\ncatch(error)\n{\n    if (error instanceof RangeError)\n    {\n        // Handle the error\n    }\n}",
    "function check(value)\n{\n    if([\"apple\", \"banana\", \"carrot\"].includes(value) === false)\n    {\n        throw new RangeError('The argument must be an \"apple\", \"banana\", or \"carrot\".')\n    }\n}\n\ntry\n{\n    check(\"cabbage\")\n}\ncatch(error)\n{\n    if(error instanceof RangeError)\n    {\n        // Handle the error\n    }\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "try {\n  let a = undefinedVariable\n} catch (e) {\n  console.log(e instanceof ReferenceError)  // true\n  console.log(e.message)                    // \"undefinedVariable is not defined\"\n  console.log(e.name)                       // \"ReferenceError\"\n  console.log(e.fileName)                   // \"Scratchpad/1\"\n  console.log(e.lineNumber)                 // 2\n  console.log(e.columnNumber)               // 6\n  console.log(e.stack)                      // \"@Scratchpad/2:2:7\\n\"\n}\n",
    "try {\n  throw new ReferenceError('Hello', 'someFile.js', 10)\n} catch (e) {\n  console.log(e instanceof ReferenceError)  // true\n  console.log(e.message)                    // \"Hello\"\n  console.log(e.name)                       // \"ReferenceError\"\n  console.log(e.fileName)                   // \"someFile.js\"\n  console.log(e.lineNumber)                 // 10\n  console.log(e.columnNumber)               // 0\n  console.log(e.stack)                      // \"@Scratchpad/2:2:9\\n\"\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "try {\n  eval('hoo bar');\n} catch (e) {\n  console.error(e instanceof SyntaxError); \n  console.error(e.message);                \n  console.error(e.name);                   \n  console.error(e.fileName);               \n  console.error(e.lineNumber);             \n  console.error(e.columnNumber);           \n  console.error(e.stack);                  \n}\n",
    "try {\n  throw new SyntaxError('Hello', 'someFile.js', 10);\n} catch (e) {\n  console.error(e instanceof SyntaxError); // true\n  console.error(e.message);                // Hello\n  console.error(e.name);                   // SyntaxError\n  console.error(e.fileName);               // someFile.js\n  console.error(e.lineNumber);             // 10\n  console.error(e.columnNumber);           // 0\n  console.error(e.stack);                  // @debugger eval code:3:9\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "try {\n  null.f() \n} catch (e) {\n  console.log(e instanceof TypeError)  // true\n  console.log(e.message)               // \"null has no properties\"\n  console.log(e.name)                  // \"TypeError\"\n  console.log(e.fileName)              // \"Scratchpad/1\"\n  console.log(e.lineNumber)            // 2\n  console.log(e.columnNumber)          // 2\n  console.log(e.stack)                 // \"@Scratchpad/2:2:3\\n\"\n}\n",
    "try {\n  throw new TypeError('Hello', \"someFile.js\", 10) \n} catch (e) {\n  console.log(e instanceof TypeError)  // true\n  console.log(e.message)               // \"Hello\"\n  console.log(e.name)                  // \"TypeError\"\n  console.log(e.fileName)              // \"someFile.js\"\n  console.log(e.lineNumber)            // 10\n  console.log(e.columnNumber)          // 0\n  console.log(e.stack)                 // \"@Scratchpad/2:2:9\\n\"\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "try {\n  decodeURIComponent('%')\n} catch (e) {\n  console.log(e instanceof URIError)  // true\n  console.log(e.message)              // \"malformed URI sequence\"\n  console.log(e.name)                 // \"URIError\"\n  console.log(e.fileName)             // \"Scratchpad/1\"\n  console.log(e.lineNumber)           // 2\n  console.log(e.columnNumber)         // 2\n  console.log(e.stack)                // \"@Scratchpad/2:2:3\\n\"\n}\n",
    "try {\n  throw new URIError('Hello', 'someFile.js', 10) \n} catch (e) {\n  console.log(e instanceof URIError)  // true\n  console.log(e.message)              // \"Hello\"\n  console.log(e.name)                 // \"URIError\"\n  console.log(e.fileName)             // \"someFile.js\"\n  console.log(e.lineNumber)           // 10\n  console.log(e.columnNumber)         // 0\n  console.log(e.stack)                // \"@Scratchpad/2:2:9\\n\"\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "const biggestNum     = Number.MAX_VALUE\nconst smallestNum    = Number.MIN_VALUE\nconst infiniteNum    = Number.POSITIVE_INFINITY\nconst negInfiniteNum = Number.NEGATIVE_INFINITY\nconst notANum        = Number.NaN\n",
    "let d = new Date('December 17, 1995 03:24:00')\nconsole.log(Number(d))\n",
    "Number('123')     // 123\nNumber('12.3')    // 12.3\nNumber('12.00')   // 12\nNumber('123e-1')  // 12.3\nNumber('')        // 0\nNumber(null)      // 0\nNumber('0x11')    // 17\nNumber('0b11')    // 3\nNumber('0o11')    // 9\nNumber('foo')     // NaN\nNumber('100a')    // NaN\nNumber('-Infinity') //-Infinity"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
    "const theBiggestInt = 9007199254740991n\n\nconst alsoHuge = BigInt(9007199254740991)\n// ↪ 9007199254740991n\n\nconst hugeString = BigInt(\"9007199254740991\")\n// ↪ 9007199254740991n\n\nconst hugeHex = BigInt(\"0x1fffffffffffff\")\n// ↪ 9007199254740991n\n\nconst hugeBin = BigInt(\"0b11111111111111111111111111111111111111111111111111111\")\n// ↪ 9007199254740991n\n",
    "typeof 1n === 'bigint'           // true\ntypeof BigInt('1') === 'bigint'  // true\n",
    "typeof Object(1n) === 'object'  // true\n",
    "const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER) \n// ↪ 9007199254740991n\n\nconst maxPlusOne = previousMaxSafe + 1n \n// ↪ 9007199254740992n\n \nconst theFuture = previousMaxSafe + 2n \n// ↪ 9007199254740993n, this works now!\n\nconst multi = previousMaxSafe * 2n \n// ↪ 18014398509481982n\n\nconst subtr = multi – 10n \n// ↪ 18014398509481972n\n\nconst mod = multi % 10n \n// ↪ 2n\n\nconst bigN = 2n ** 54n \n// ↪ 18014398509481984n\n\nbigN * -1n\n// ↪ –18014398509481984n\n",
    "const expected = 4n / 2n\n// ↪ 2n\n\nconst rounded = 5n / 2n\n// ↪ 2n, not 2.5n\n\n",
    "0n === 0\n// ↪ false\n\n0n == 0\n// ↪ true",
    "1n < 2\n// ↪ true\n\n2n > 1\n// ↪ true\n\n2 > 2\n// ↪ false\n\n2n > 2\n// ↪ false\n\n2n >= 2\n// ↪ true",
    "const mixed = [4n, 6, -12n, 10, 4, 0, 0n] \n// ↪  [4n, 6, -12n, 10, 4, 0, 0n]\n\nmixed.sort() \n// ↪ [-12n, 0, 0n, 4n, 4, 6, 10]\n",
    "0n === Object(0n)          // false\nObject(0n) === Object(0n)  // false\n\nconst o = Object(0n) \no === o                    // true\n",
    "if (0n) {\n  console.log('Hello from the if!') \n} else {\n  console.log('Hello from the else!') \n}\n\n// ↪ \"Hello from the else!\"\n\n0n || 12n\n// ↪ 12n\n\n0n && 12n\n// ↪ 0n\n\nBoolean(0n)\n// ↪ false\n\nBoolean(12n)\n// ↪ true\n\n!12n\n// ↪ false\n\n!0n\n// ↪ true\n",
    "BigInt.prototype.toJSON = function() { return this.toString()  }",
    "JSON.stringify(BigInt(1)) \n// '\"1\"'",
    "// Returns true if passed BigInt is a prime number\nfunction isPrime(p) {\n  for (let i = 2n; i * i <= p; i++) {\n    if (p % i === 0n) return false;\n  }\n  return true\n}\n\n// Takes a BigInt as an argument, returns nth prime number as BigInt\nfunction nthPrime(nth) {\n  let maybePrime = 2n\n  let prime = 0n\n  \n  while (nth >= 0n) {\n    if (isPrime(maybePrime)) {\n      nth--\n      prime = maybePrime\n    }\n    maybePrime++\n  }\n  \n  return prime\n}\n\nnthPrime(20n)\n// ↪ 73n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates",
    "1234567890\n42\n\n// Caution when using leading zeros:\n\n0888 // 888 parsed as decimal\n0777 // parsed as octal in non-strict mode (511 in decimal)\n",
    "var FLT_SIGNBIT  = 0b10000000000000000000000000000000; // 2147483648\nvar FLT_EXPONENT = 0b01111111100000000000000000000000; // 2139095040\nvar FLT_MANTISSA = 0B00000000011111111111111111111111; // 8388607",
    "var n = 0755; // 493\nvar m = 0644; // 420\n",
    "var a = 0o10; // ES2015: 8\n",
    "0xFFFFFFFFFFFFFFFFF // 295147905179352830000\n0x123456789ABCDEF   // 81985529216486900\n0XA                 // 10\n",
    "1E3   // 1000\n2e6   // 2000000\n0.1e2 // 10",
    "var biggestNum = Number.MAX_VALUE;\nvar smallestNum = Number.MIN_VALUE;\nvar infiniteNum = Number.POSITIVE_INFINITY;\nvar negInfiniteNum = Number.NEGATIVE_INFINITY;\nvar notANum = Number.NaN;\n",
    "Math.PI\n",
    "Math.sin(1.56)\n",
    "var dateObjectName = new Date([parameters]);\n",
    "var Xmas95 = new Date('December 25, 1995');\n",
    "var today = new Date();\nvar endYear = new Date(1995, 11, 31, 23, 59, 59, 999); // Set day and month\nendYear.setFullYear(today.getFullYear()); // Set year to this year\nvar msPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds per day\nvar daysLeft = (endYear.getTime() - today.getTime()) / msPerDay;\nvar daysLeft = Math.round(daysLeft); //returns days left in the year\n",
    "var IPOdate = new Date();\nIPOdate.setTime(Date.parse('Aug 9, 1995'));\n",
    "function JSClock() {\n  var time = new Date();\n  var hour = time.getHours();\n  var minute = time.getMinutes();\n  var second = time.getSeconds();\n  var temp = '' + ((hour > 12) ? hour - 12 : hour);\n  if (hour == 0)\n    temp = '12';\n  temp += ((minute < 10) ? ':0' : ':') + minute;\n  temp += ((second < 10) ? ':0' : ':') + second;\n  temp += (hour >= 12) ? ' P.M.' : ' A.M.';\n  return temp;\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "// From a length\nvar int8 = new Int8Array(2);\nint8[0] = 42;\nconsole.log(int8[0]); // 42\nconsole.log(int8.length); // 2\nconsole.log(int8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nvar arr = new Int8Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Int8Array([21, 31]);\nvar y = new Int8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(8);\nvar z = new Int8Array(buffer, 1, 4);\n\n// From an iterable\nvar iterable = function*(){ yield* [1,2,3]; }();\nvar int8 = new Int8Array(iterable);\n// Int8Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "// From a length\nvar uint8 = new Uint8Array(2);\nuint8[0] = 42;\nconsole.log(uint8[0]); // 42\nconsole.log(uint8.length); // 2\nconsole.log(uint8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nvar arr = new Uint8Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Uint8Array([21, 31]);\nvar y = new Uint8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(8);\nvar z = new Uint8Array(buffer, 1, 4);\n\n// From an iterable \nvar iterable = function*(){ yield* [1,2,3]; }(); \nvar uint8 = new Uint8Array(iterable); \n// Uint8Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "// From a length\nvar uintc8 = new Uint8ClampedArray(2);\nuintc8[0] = 42;\nuintc8[1] = 1337;\nconsole.log(uintc8[0]); // 42\nconsole.log(uintc8[1]); // 255 (clamped)\nconsole.log(uintc8.length); // 2\nconsole.log(uintc8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nvar arr = new Uint8ClampedArray([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Uint8ClampedArray([21, 31]);\nvar y = new Uint8ClampedArray(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(8);\nvar z = new Uint8ClampedArray(buffer, 1, 4);\n\n// From an iterable \nvar iterable = function*(){ yield* [1,2,3]; }(); \nvar uintc8 = new Uint8ClampedArray(iterable); \n// Uint8ClampedArray[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "// From a length\nvar int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\nconsole.log(int16.length); // 2\nconsole.log(int16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nvar arr = new Int16Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Int16Array([21, 31]);\nvar y = new Int16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(8);\nvar z = new Int16Array(buffer, 0, 4);\n\n// From an iterable\nvar iterable = function*(){ yield* [1,2,3]; }();\nvar int16 = new Int16Array(iterable);\n// Int16Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "// From a length\nvar uint16 = new Uint16Array(2);\nuint16[0] = 42;\nconsole.log(uint16[0]); // 42\nconsole.log(uint16.length); // 2\nconsole.log(uint16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nvar arr = new Uint16Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Uint16Array([21, 31]);\nvar y = new Uint16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(8);\nvar z = new Uint16Array(buffer, 0, 4);\n\n// From an iterable\nvar iterable = function*(){ yield* [1,2,3]; }(); \nvar uint16 = new Uint16Array(iterable); \n// Uint16Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "// From a length\nvar uint32 = new Uint32Array(2);\nuint32[0] = 42;\nconsole.log(uint32[0]); // 42\nconsole.log(uint32.length); // 2\nconsole.log(uint32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nvar arr = new Uint32Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Uint32Array([21, 31]);\nvar y = new Uint32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(16);\nvar z = new Uint32Array(buffer, 0, 4);\n\n// From an iterable \nvar iterable = function*(){ yield* [1,2,3]; }(); \nvar uint32 = new Uint32Array(iterable);\n// Uint32Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "// From a length\nvar float32 = new Float32Array(2);\nfloat32[0] = 42;\nconsole.log(float32[0]); // 42\nconsole.log(float32.length); // 2\nconsole.log(float32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nvar arr = new Float32Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Float32Array([21, 31]);\nvar y = new Float32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(16);\nvar z = new Float32Array(buffer, 0, 4);\n\n// From an iterable \nvar iterable = function*(){ yield* [1,2,3]; }(); \nvar float32 = new Float32Array(iterable); \n// Float32Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "// From a length\nvar float64 = new Float64Array(2);\nfloat64[0] = 42;\nconsole.log(float64[0]); // 42\nconsole.log(float64.length); // 2\nconsole.log(float64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nvar arr = new Float64Array([21,31]);\nconsole.log(arr[1]); // 31\n\n// From another TypedArray\nvar x = new Float64Array([21, 31]);\nvar y = new Float64Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(32);\nvar z = new Float64Array(buffer, 0, 4);\n\n// From an iterable \nvar iterable = function*(){ yield* [1,2,3]; }();\nvar float64 = new Float64Array(iterable);\n// Float64Array[1, 2, 3]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
    "// From a length\nvar bigint64 = new BigInt64Array(2);\nbigint64[0] = 42n;\nconsole.log(bigint64[0]); // 42n\nconsole.log(bigint64.length); // 2\nconsole.log(bigint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nvar arr = new BigInt64Array([21n,31n]);\nconsole.log(arr[1]); // 31n\n\n// From another TypedArray\nvar x = new BigInt64Array([21n, 31n]);\nvar y = new BigInt64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(32);\nvar z = new BigInt64Array(buffer, 0, 4);\n\n// From an iterable\nvar iterable = function*(){ yield* [1n, 2n, 3n]; }(); \nvar bigint64 = new BigInt64Array(iterable); \n// BigInt64Array[1n, 2n, 3n]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
    "// From a length\nvar biguint64 = new BigUint64Array(2);\nbiguint64[0] = 42n;\nconsole.log(biguint64[0]); // 42n\nconsole.log(biguint64.length); // 2\nconsole.log(biguint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nvar arr = new BigUint64Array([21n,31n]);\nconsole.log(arr[1]); // 31n\n\n// From another TypedArray\nvar x = new BigUint64Array([21n, 31n]);\nvar y = new BigUint64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nvar buffer = new ArrayBuffer(32);\nvar z = new BigUint64Array(buffer, 0, 4);\n\n// From an iterable\nvar iterable = function*(){ yield* [1n, 2n, 3n]; }(); \nvar biguint64 = new BigUint64Array(iterable); \n// BigUint64Array[1n, 2n, 3n]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "let myMap = new Map()\n\nlet keyString = 'a string'\nlet keyObj    = {}\nlet keyFunc   = function() {}\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\")\nmyMap.set(keyObj, 'value associated with keyObj')\nmyMap.set(keyFunc, 'value associated with keyFunc')\n\nmyMap.size              // 3\n\n// getting the values\nmyMap.get(keyString)    // \"value associated with 'a string'\"\nmyMap.get(keyObj)       // \"value associated with keyObj\"\nmyMap.get(keyFunc)      // \"value associated with keyFunc\"\n\nmyMap.get('a string')    // \"value associated with 'a string'\"\n                         // because keyString === 'a string'\nmyMap.get({})            // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}\n",
    "let myMap = new Map()\nmyMap.set(NaN, 'not a number')\n\nmyMap.get(NaN) \n// \"not a number\"\n\nlet otherNaN = Number('foo')\nmyMap.get(otherNaN) \n// \"not a number\"\n",
    "let myMap = new Map()\nmyMap.set(0, 'zero')\nmyMap.set(1, 'one')\n\nfor (let [key, value] of myMap) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n\nfor (let key of myMap.keys()) {\n  console.log(key)\n}\n// 0\n// 1\n\nfor (let value of myMap.values()) {\n  console.log(value)\n}\n// zero\n// one\n\nfor (let [key, value] of myMap.entries()) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n",
    "myMap.forEach(function(value, key) {\n  console.log(key + ' = ' + value)\n})\n// 0 = zero\n// 1 = one\n",
    "let kvArray = [['key1', 'value1'], ['key2', 'value2']]\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nlet myMap = new Map(kvArray)\n\nmyMap.get('key1') // returns \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)) // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap])\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())) // [\"key1\", \"key2\"]\n",
    "let original = new Map([\n  [1, 'one']\n])\n\nlet clone = new Map(original)\n\nconsole.log(clone.get(1))       // one\nconsole.log(original === clone) // false (useful for shallow comparison)",
    "let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge two maps. The last repeated key wins.\n// Spread operator essentially converts a Map to an Array\nlet merged = new Map([...first, ...second])\n\nconsole.log(merged.get(1)) // uno\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three",
    "let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge maps with an array. The last repeated key wins.\nlet merged = new Map([...first, ...second, [1, 'eins']])\n\nconsole.log(merged.get(1)) // eins\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "function isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false\n        }\n    }\n    return true\n}\n\nfunction union(setA, setB) {\n    let _union = new Set(setA)\n    for (let elem of setB) {\n        _union.add(elem)\n    }\n    return _union\n}\n\nfunction intersection(setA, setB) {\n    let _intersection = new Set()\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem)\n        }\n    }\n    return _intersection\n}\n\nfunction symmetricDifference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem)\n        } else {\n            _difference.add(elem)\n        }\n    }\n    return _difference\n}\n\nfunction difference(setA, setB) {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        _difference.delete(elem)\n    }\n    return _difference\n}\n\n// Examples\nlet setA = new Set([1, 2, 3, 4])\nlet setB = new Set([2, 3])\nlet setC = new Set([3, 4, 5, 6])\n\nisSuperset(setA, setB)          // => true\nunion(setA, setC)               // => Set [1, 2, 3, 4, 5, 6]\nintersection(setA, setC)        // => Set [3, 4]\nsymmetricDifference(setA, setC) // => Set [1, 2, 5, 6]\ndifference(setA, setC)          // => Set [1, 2]\n\n",
    "let myArray = ['value1', 'value2', 'value3']\n\n// Use the regular Set constructor to transform an Array into a Set\nlet mySet = new Set(myArray)\n\nmySet.has('value1')     // returns true\n\n// Use the spread operator to transform a set into an Array.\nconsole.log([...mySet]) // Will show you exactly the same Array as myArray\n",
    "// Use to remove duplicate elements from the array \n\nconst numbers = [2,3,4,4,2,3,3,4,4,5,5,6,6,7,5,32,3,4,5]\n\nconsole.log([...new Set(numbers)]) \n\n// [2, 3, 4, 5, 6, 7, 32]"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "const wm1 = new WeakMap(),\n      wm2 = new WeakMap(),\n      wm3 = new WeakMap();\nconst o1 = {},\n      o2 = function() {},\n      o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, 'azerty');\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o3, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because there is no key for o2 on wm2\nwm2.get(o3); // undefined, because that is the set value\n\nwm1.has(o2); // true\nwm2.has(o2); // false\nwm2.has(o3); // true (even if the value itself is 'undefined')\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\n\nwm1.has(o1); // true\nwm1.delete(o1);\nwm1.has(o1); // false\n",
    "class ClearableWeakMap {\n  constructor(init) {\n    this._wm = new WeakMap(init);\n  }\n  clear() {\n    this._wm = new WeakMap();\n  }\n  delete(k) {\n    return this._wm.delete(k);\n  }\n  get(k) {\n    return this._wm.get(k);\n  }\n  has(k) {\n    return this._wm.has(k);\n  }\n  set(k, v) {\n    this._wm.set(k, v);\n    return this;\n  }\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "const buffer = new ArrayBuffer(8);\nconst view = new Int32Array(buffer);"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
    "var sab = new SharedArrayBuffer(1024);\nworker.postMessage(sab);\n",
    "var sab = SharedArrayBuffer(1024);\n// TypeError: calling a builtin SharedArrayBuffer constructor \n// without new is forbidden",
    "var sab = new SharedArrayBuffer(1024);"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "var littleEndian = (function() {\n  var buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n})();\nconsole.log(littleEndian); // true or false\n",
    "function getUint64(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left =  dataview.getUint32(byteOffset, littleEndian);\n  const right = dataview.getUint32(byteOffset+4, littleEndian);\n\n  // combine the two 32-bit values\n  const combined = littleEndian? left + 2**32*right : 2**32*left + right;\n\n  if (!Number.isSafeInteger(combined))\n    console.warn(combined, 'exceeds MAX_SAFE_INTEGER. Precision may be lost');\n\n  return combined;\n}\n",
    "const BigInt = window.BigInt, bigThirtyTwo = BigInt(32), bigZero = BigInt(0);\nfunction getUint64BigInt(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = BigInt(dataview.getUint32(byteOffset|0, !!littleEndian)>>>0);\n  const right = BigInt(dataview.getUint32((byteOffset|0) + 4|0, !!littleEndian)>>>0);\n\n  // combine the two 32-bit values and return\n  return littleEndian ? (right<<bigThirtyTwo)|left : (left<<bigThirtyTwo)|right;\n}",
    "var buffer = new ArrayBuffer(16);\nvar view = new DataView(buffer, 0);\n\nview.setInt16(1, 42);\nview.getInt16(1); // 42\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "let code = '\"\\u2028\\u2029\"'\nJSON.parse(code)  // evaluates to \"\\u2028\\u2029\" in all engines\neval(code)        // throws a SyntaxError in old engines\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "let myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code. \n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout( function() {\n    resolve(\"Success!\")  // Yay! Everything went well!\n  }, 250) \n}) \n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(\"Yay! \" + successMessage) \n});\n",
    "'use strict';\nvar promiseCount = 0;\n\nfunction testPromise() {\n    let thisPromiseCount = ++promiseCount;\n\n    let log = document.getElementById('log');\n    log.insertAdjacentHTML('beforeend', thisPromiseCount +\n        ') Started (<small>Sync code started</small>)<br/>');\n\n    // We make a new promise: we promise a numeric count of this promise, starting from 1 (after waiting 3s)\n    let p1 = new Promise(\n        // The executor function is called with the ability to resolve or\n        // reject the promise\n       (resolve, reject) => {\n            log.insertAdjacentHTML('beforeend', thisPromiseCount +\n                ') Promise started (<small>Async code started</small>)<br/>');\n            // This is only an example to create asynchronism\n            window.setTimeout(\n                function() {\n                    // We fulfill the promise !\n                    resolve(thisPromiseCount);\n                }, Math.random() * 2000 + 1000);\n        }\n    );\n\n    // We define what to do when the promise is resolved with the then() call,\n    // and what to do when the promise is rejected with the catch() call\n    p1.then(\n        // Log the fulfillment value\n        function(val) {\n            log.insertAdjacentHTML('beforeend', val +\n                ') Promise fulfilled (<small>Async code terminated</small>)<br/>');\n        }).catch(\n        // Log the rejection reason\n       (reason) => {\n            console.log('Handle rejected promise ('+reason+') here.');\n        });\n\n    log.insertAdjacentHTML('beforeend', thisPromiseCount +\n        ') Promise made (<small>Sync code terminated</small>)<br/>');\n}",
    "if (\"Promise\" in window) {\n  let btn = document.getElementById(\"btn\");\n  btn.addEventListener(\"click\",testPromise);\n} else {\n  log = document.getElementById('log');\n  log.innerHTML = \"Live example not available as your browser doesn't support the <code>Promise<code> interface.\";\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "function* idMaker() {\n    var index = 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker(); // \"Generator { }\"\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\n// ...",
    "function* fibonacci() {\n  var a = yield 1;\n  yield a * 2;\n}\n\nvar it = fibonacci();\nconsole.log(it);          // \"Generator {  }\"\nconsole.log(it.next());   // 1\nconsole.log(it.send(10)); // 20\nconsole.log(it.close());  // undefined\nconsole.log(it.next());   // throws StopIteration (as the generator is now closed)\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "Object.getPrototypeOf(function*(){}).constructor\n",
    "var GeneratorFunction = Object.getPrototypeOf(function*(){}).constructor\nvar g = new GeneratorFunction('a', 'yield a * 2');\nvar iterator = g(10);\nconsole.log(iterator.next().value); // 20\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "const handler = {\n  get: function(obj, prop) {\n    return prop in obj ?\n      obj[prop] :\n      37;\n  }\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b); \n//  1, undefined\n\nconsole.log('c' in p, p.c); \n//  false, 37\n",
    "const target = {};\nconst p = new Proxy(target, {});\n\np.a = 37;\n//  operation forwarded to the target\n\nconsole.log(target.a);\n//  37\n//  (The operation has been properly forwarded!)\n",
    "let validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nconst person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = 'young';    // Throws an exception\nperson.age = 300;        // Throws an exception\n",
    "function extend(sup, base) {\n  var descriptor = Object.getOwnPropertyDescriptor(\n    base.prototype, 'constructor'\n  );\n  base.prototype = Object.create(sup.prototype);\n  var handler = {\n    construct: function(target, args) {\n      var obj = Object.create(base.prototype);\n      this.apply(target, obj, args);\n      return obj;\n    },\n    apply: function(target, that, args) {\n      sup.apply(that, args);\n      base.apply(that, args);\n    }\n  };\n  var proxy = new Proxy(base, handler);\n  descriptor.value = proxy;\n  Object.defineProperty(base.prototype, 'constructor', descriptor);\n  return proxy;\n}\n\nvar Person = function(name) {\n  this.name = name;\n};\n\nvar Boy = extend(Person, function(name, age) {\n  this.age = age;\n});\n\nBoy.prototype.gender = 'M';\n\nvar Peter = new Boy('Peter', 13);\n\nconsole.log(Peter.gender);  // \"M\"\nconsole.log(Peter.name);    // \"Peter\"\nconsole.log(Peter.age);     // 13",
    "let view = new Proxy({\n  selected: null\n},\n{\n  set: function(obj, prop, newval) {\n    let oldval = obj[prop];\n\n    if (prop === 'selected') {\n      if (oldval) {\n        oldval.setAttribute('aria-selected', 'false');\n      }\n      if (newval) {\n        newval.setAttribute('aria-selected', 'true');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = newval;\n\n    // Indicate success\n    return true;\n  }\n});\n\nlet i1 = view.selected = document.getElementById('item-1');\nconsole.log(i1.getAttribute('aria-selected')); \n//  'true'\n\nlet i2 = view.selected = document.getElementById('item-2');\nconsole.log(i1.getAttribute('aria-selected')); \n//  'false'\n\nconsole.log(i2.getAttribute('aria-selected')); \n//  'true'",
    "let products = new Proxy({\n  browsers: ['Internet Explorer', 'Netscape']\n},\n{\n  get: function(obj, prop) {\n    // An extra property\n    if (prop === 'latestBrowser') {\n      return obj.browsers[obj.browsers.length - 1];\n    }\n\n    // The default behavior to return the value\n    return obj[prop];\n  },\n  set: function(obj, prop, value) {\n    // An extra property\n    if (prop === 'latestBrowser') {\n      obj.browsers.push(value);\n      return true;\n    }\n\n    // Convert the value if it is not an array\n    if (typeof value === 'string') {\n      value = [value];\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  }\n});\n\nconsole.log(products.browsers); \n//  ['Internet Explorer', 'Netscape']\n\nproducts.browsers = 'Firefox'; \n//  pass a string (by mistake)\n\nconsole.log(products.browsers); \n//  ['Firefox'] <- no problem, the value is an array\n\nproducts.latestBrowser = 'Chrome';\n\nconsole.log(products.browsers); \n//  ['Firefox', 'Chrome']\n\nconsole.log(products.latestBrowser);\n//  'Chrome'",
    "let products = new Proxy([\n  { name: 'Firefox', type: 'browser' },\n  { name: 'SeaMonkey', type: 'browser' },\n  { name: 'Thunderbird', type: 'mailer' }\n],\n{\n  get: function(obj, prop) {\n    // The default behavior to return the value; prop is usually an integer\n    if (prop in obj) {\n      return obj[prop];\n    }\n\n    // Get the number of products; an alias of products.length\n    if (prop === 'number') {\n      return obj.length;\n    }\n\n    let result, types = {};\n\n    for (let product of obj) {\n      if (product.name === prop) {\n        result = product;\n      }\n      if (types[product.type]) {\n        types[product.type].push(product);\n      } else {\n        types[product.type] = [product];\n      }\n    }\n\n    // Get a product by name\n    if (result) {\n      return result;\n    }\n\n    // Get products by type\n    if (prop in types) {\n      return types[prop];\n    }\n\n    // Get product types\n    if (prop === 'types') {\n      return Object.keys(types);\n    }\n\n    return undefined;\n  }\n});\n\nconsole.log(products[0]);          // { name: 'Firefox', type: 'browser' }\nconsole.log(products['Firefox']);  // { name: 'Firefox', type: 'browser' }\nconsole.log(products['Chrome']);   // undefined\nconsole.log(products.browser);     // [{ name: 'Firefox', type: 'browser' }, { name: 'SeaMonkey', type: 'browser' }]\nconsole.log(products.types);       // ['browser', 'mailer']\nconsole.log(products.number);      // 3\n",
    "/*\n  var docCookies = ... get the \"docCookies\" object here:  \n  https://developer.mozilla.org/en-US/docs/DOM/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\n*/\n\nvar docCookies = new Proxy(docCookies, {\n  get: function (oTarget, sKey) {\n    return oTarget[sKey] || oTarget.getItem(sKey) || undefined;\n  },\n  set: function (oTarget, sKey, vValue) {\n    if (sKey in oTarget) { return false; }\n    return oTarget.setItem(sKey, vValue);\n  },\n  deleteProperty: function (oTarget, sKey) {\n    if (sKey in oTarget) { return false; }\n    return oTarget.removeItem(sKey);\n  },\n  enumerate: function (oTarget, sKey) {\n    return oTarget.keys();\n  },\n  ownKeys: function (oTarget, sKey) {\n    return oTarget.keys();\n  },\n  has: function (oTarget, sKey) {\n    return sKey in oTarget || oTarget.hasItem(sKey);\n  },\n  defineProperty: function (oTarget, sKey, oDesc) {\n    if (oDesc && 'value' in oDesc) { oTarget.setItem(sKey, oDesc.value); }\n    return oTarget;\n  },\n  getOwnPropertyDescriptor: function (oTarget, sKey) {\n    var vValue = oTarget.getItem(sKey);\n    return vValue ? {\n      value: vValue,\n      writable: true,\n      enumerable: true,\n      configurable: false\n    } : undefined;\n  },\n});\n\n/* Cookies test */\n\nconsole.log(docCookies.my_cookie1 = 'First value');\nconsole.log(docCookies.getItem('my_cookie1'));\n\ndocCookies.setItem('my_cookie1', 'Changed value');\nconsole.log(docCookies.my_cookie1);"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator",
    "console.log(new Intl.Collator().compare('a', 'c')); // → a negative value\nconsole.log(new Intl.Collator().compare('c', 'a')); // → a positive value\nconsole.log(new Intl.Collator().compare('a', 'a')); // → 0\n",
    "// in German, ä sorts with a\nconsole.log(new Intl.Collator('de').compare('ä', 'z'));\n// → a negative value\n\n// in Swedish, ä sorts after z\nconsole.log(new Intl.Collator('sv').compare('ä', 'z'));\n// → a positive value\n",
    "// in German, ä has a as the base letter\nconsole.log(new Intl.Collator('de', { sensitivity: 'base' }).compare('ä', 'a'));\n// → 0\n\n// in Swedish, ä and a are separate base letters\nconsole.log(new Intl.Collator('sv', { sensitivity: 'base' }).compare('ä', 'a'));\n// → a positive value\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat",
    "var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// toLocaleString without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(new Intl.DateTimeFormat().format(date));\n// → \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n",
    "var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0, 200));\n\n// request a weekday along with a long date\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nconsole.log(new Intl.DateTimeFormat('de-DE', options).format(date));\n// → \"Donnerstag, 20. Dezember 2012\"\n\n// an application may want to use UTC and make that visible\noptions.timeZone = 'UTC';\noptions.timeZoneName = 'short';\nconsole.log(new Intl.DateTimeFormat('en-US', options).format(date));\n// → \"Thursday, December 20, 2012, GMT\"\n\n// sometimes you want to be more precise\noptions = {\n  hour: 'numeric', minute: 'numeric', second: 'numeric', \n  timeZone: 'Australia/Sydney',\n  timeZoneName: 'short'\n};\nconsole.log(new Intl.DateTimeFormat('en-AU', options).format(date));\n// → \"2:00:00 pm AEDT\"\n\n// sometimes you want to be very precise\noptions.fractionalSecondDigits = 3;\nconsole.log(new Intl.DateTimeFormat('en-AU', options).format(date));\n// → \"2:00:00.200 pm AEDT\"\n\n\n// sometimes even the US needs 24-hour time\noptions = {\n  year: 'numeric', month: 'numeric', day: 'numeric',\n  hour: 'numeric', minute: 'numeric', second: 'numeric',\n  hour12: false,\n  timeZone: 'America/Los_Angeles' \n};\nconsole.log(new Intl.DateTimeFormat('en-US', options).format(date));\n// → \"12/19/2012, 19:00:00\"\n\n\n// to specify options but use the browser's default locale, use 'default'\nconsole.log(new Intl.DateTimeFormat('default', options).format(date));\n// → \"12/19/2012, 19:00:00\"\n\n// sometimes it's helpful to include the period of the day\noption = {hour: \"numeric\", dayPeriod: \"short\"};\nconsole.log(new Intl.DateTimeFormat('en-US', options).format(date));\n// → 10 at night \n",
    "var options = {calendar: 'chinese', numberingSystem: 'arab'};\nvar dateFormat = new Intl.DateTimeFormat('default', options);\nvar usedOptions = dateFormat.resolvedOptions();\n\nconsole.log(usedOptions.calendar);\n// → \"chinese\"\n\nconsole.log(usedOptions.numberingSystem);\n// → \"arab\"\n\nconsole.log(usedOptions.timeZone);\n// → \"America/New_York\" (the users default timezone)\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat",
    "const list = ['Motorcycle', 'Bus', 'Car'];\n\n console.log(new Intl.ListFormat('en-GB', { style: 'long', type: 'conjunction' }).format(list));\n// > Motorcycle, Bus and Car\n\n console.log(new Intl.ListFormat('en-GB', { style: 'short', type: 'disjunction' }).format(list));\n// > Motorcycle, Bus or Car\n\n console.log(new Intl.ListFormat('en-GB', { style: 'narrow', type: 'unit' }).format(list));\n// > Motorcycle Bus Car\n",
    "const list = ['Motorcycle', 'Bus', 'Car'];\nconsole.log(new Intl.ListFormat('en-GB', { style: 'long', type: 'conjunction' }).formatToParts(list));\n \n// [ { \"type\": \"element\", \"value\": \"Motorcycle\" }, \n//   { \"type\": \"literal\", \"value\": \", \" }, \n//   { \"type\": \"element\", \"value\": \"Bus\" },\n//   { \"type\": \"literal\", \"value\": \", and \" },\n//   { \"type\": \"element\", \"value\": \"Car\" } ];\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
    "var number = 3500;\n\nconsole.log(new Intl.NumberFormat().format(number));\n// → '3,500' if in US English locale\n",
    "var number = 123456.789;\n\n// German uses comma as decimal separator and period for thousands\nconsole.log(new Intl.NumberFormat('de-DE').format(number));\n// → 123.456,789\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(new Intl.NumberFormat('ar-EG').format(number));\n// → ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(new Intl.NumberFormat('en-IN').format(number));\n// → 1,23,456.789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(new Intl.NumberFormat('zh-Hans-CN-u-nu-hanidec').format(number));\n// → 一二三,四五六.七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(new Intl.NumberFormat(['ban', 'id']).format(number));\n// → 123.456,789\n",
    "var number = 123456.789;\n\n// request a currency format\nconsole.log(new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(number));\n// → 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(new Intl.NumberFormat('ja-JP', { style: 'currency', currency: 'JPY' }).format(number));\n// → ￥123,457\n\n// limit to three significant digits\nconsole.log(new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(number));\n// → 1,23,000\n",
    "console.log(new Intl.NumberFormat(\"pt-PT\",  {\n    style: 'unit',\n    unit: \"mile-per-hour\"\n}).format(50));\n// → 50 mi/h\n\nconsole.log((16).toLocaleString('en-GB', {\n    style: \"unit\",\n    unit: \"liter\",\n    unitDisplay: \"long\"\n}));\n// → 16 litres\n",
    "console.log(new Intl.NumberFormat('en-US', { notation: \"scientific\" }).format(987654321));\n// → 9.877E8\n\nconsole.log(new Intl.NumberFormat('pt-PT', { notation: \"scientific\" }).format(987654321));\n// → 9,877E8\n\nconsole.log(new Intl.NumberFormat('en-GB', { notation: \"engineering\" }).format(987654321));\n// → 987.654E6\n\nconsole.log(new Intl.NumberFormat('de', { notation: \"engineering\" }).format(987654321));\n// → 987,654E6\n\nconsole.log(new Intl.NumberFormat('zh-CN', { notation: \"compact\" }).format(987654321)); \n// → 9.9亿\n\nconsole.log(new Intl.NumberFormat('fr', { notation: \"compact\" , compactDisplay: \"long\" }).format(987654321)); \n// → 988 millions\n\nconsole.log(new Intl.NumberFormat('en-GB', { notation: \"compact\" , compactDisplay: \"short\" }).format(987654321));\n// → 988M\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules",
    "// Arabic has different plural rules\n\nnew Intl.PluralRules('ar-EG').select(0);\n// → 'zero'\nnew Intl.PluralRules('ar-EG').select(1); \n// → 'one'\nnew Intl.PluralRules('ar-EG').select(2);\n// → 'two'\nnew Intl.PluralRules('ar-EG').select(6);\n// → 'few'\nnew Intl.PluralRules('ar-EG').select(18);\n// → 'many'\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat",
    "// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n    localeMatcher: \"best fit\", // other values: \"lookup\"\n    numeric: \"always\", // other values: \"auto\"\n    style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\");\n// > \"1 day ago\"\n\n// Format relative time using positive  value (1).\nrtf.format(1, \"day\");\n// > \"in 1 day\"",
    "const rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using the day unit.\nrtf.formatToParts(-1, \"day\");\n// > [{ type: \"literal\", value: \"yesterday\"}]\n\nrtf.formatToParts(100, \"day\");\n// > [{ type: \"literal\", value: \"in \" }, \n// >  { type: \"integer\", value: \"100\", unit: \"day\" }, \n// >  { type: \"literal\", value: \" days\" }]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly",
    "var importObject = { imports: { imported_func: arg => console.log(arg) } };\n\nWebAssembly.instantiateStreaming(fetch('simple.wasm'), importObject)\n.then(obj => obj.instance.exports.exported_func());"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory",
    "var memory = new WebAssembly.Memory({initial:10, maximum:100});",
    "WebAssembly.instantiateStreaming(fetch('memory.wasm'), { js: { mem: memory } })\n.then(obj => {\n  var i32 = new Uint32Array(memory.buffer);\n  for (var i = 0; i < 10; i++) {\n    i32[i] = i;\n  }\n  var sum = obj.instance.exports.accumulate(0, 10);\n  console.log(sum);\n});"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table",
    "var tbl = new WebAssembly.Table({initial:2, element:\"anyfunc\"});\nconsole.log(tbl.length);  // \"2\"\nconsole.log(tbl.get(0));  // \"null\"\nconsole.log(tbl.get(1));  // \"null\"",
    "var importObj = {\n  js: {\n    tbl:tbl\n  }\n};",
    "WebAssembly.instantiateStreaming(fetch('table2.wasm'), importObject)\n.then(function(obj) {\n  console.log(tbl.length);\n  console.log(tbl.get(0)());\n  console.log(tbl.get(1)());\n});"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError",
    "try {\n  throw new WebAssembly.LinkError('Hello', 'someFile', 10);\n} catch (e) {\n  console.log(e instanceof LinkError); // true\n  console.log(e.message);                 // \"Hello\"\n  console.log(e.name);                    // \"LinkError\"\n  console.log(e.fileName);                // \"someFile\"\n  console.log(e.lineNumber);              // 10\n  console.log(e.columnNumber);            // 0\n  console.log(e.stack);                   // returns the location where the code was run\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError",
    "try {\n  throw new WebAssembly.RuntimeError('Hello', 'someFile', 10);\n} catch (e) {\n  console.log(e instanceof RuntimeError); // true\n  console.log(e.message);                 // \"Hello\"\n  console.log(e.name);                    // \"RuntimeError\"\n  console.log(e.fileName);                // \"someFile\"\n  console.log(e.lineNumber);              // 10\n  console.log(e.columnNumber);            // 0\n  console.log(e.stack);                   // returns the location where the code was run\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block",
    "var x = 1;\n{\n  var x = 2;\n}\nconsole.log(x); // logs 2\n",
    "let x = 1;\n{\n  let x = 2;\n}\nconsole.log(x); // logs 1",
    "const c = 1;\n{\n  const c = 2;\n}\nconsole.log(c); // logs 1 and does not throw SyntaxError..."
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break",
    "function testBreak(x) {\n  var i = 0;\n\n  while (i < 6) {\n    if (i == 3) {\n      break;\n    }\n    i += 1;\n  }\n\n  return i * x;\n}",
    "outer_block: {\n  inner_block: {\n    console.log('1');\n    break outer_block; // breaks out of both inner_block and outer_block\n    console.log(':-('); // skipped\n  }\n  console.log('2'); // skipped\n}\n",
    "block_1: {\n  console.log('1');\n  break block_2; // SyntaxError: label not found\n}\n\nblock_2: {\n  console.log('2');\n}\n",
    "function testBreak(x) {\n  var i = 0;\n\n  while (i < 6) {\n    if (i == 3) {\n      (function() {\n        break;\n      })();\n    }\n    i += 1;\n  }\n\nreturn i * x;\n}\n\ntestBreak(1); // SyntaxError: Illegal break statement\n",
    "block_1: {\n  console.log('1');\n  ( function() {\n    break block_1; // SyntaxError: Undefined label 'block_1'\n  })();\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue",
    "var i = 0;\nvar n = 0;\n\nwhile (i < 5) {\n  i++;\n\n  if (i === 3) {\n    continue;\n  }\n\n  n += i;\n}\n",
    "var i = 0;\nvar j = 8;\n\ncheckiandj: while (i < 4) {\n  console.log('i: ' + i);\n  i += 1;\n\n  checkj: while (j > 4) {\n    console.log('j: ' + j);\n    j -= 1;\n\n    if ((j % 2) == 0)\n      continue checkj;\n    console.log(j + ' is odd.');\n  }\n  console.log('i = ' + i);\n  console.log('j = ' + j);\n}\n",
    "i: 0\n\n// start checkj\nj: 8\n7 is odd.\nj: 7\nj: 6\n5 is odd.\nj: 5\n// end checkj\n\ni = 1 \nj = 4 \n\ni: 1\ni = 2 \nj = 4\n\ni: 2\ni = 3\nj = 4\n\ni: 3\ni = 4\nj = 4\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty",
    "let arr = [1, 2, 3];\n\n// Assign all array values to 0\nfor (let i = 0; i < arr.length; arr[i++] = 0) /* empty statement */ ;\n\nconsole.log(arr);\n// [0, 0, 0]\n",
    "if (condition);       // Caution, this \"if\" does nothing!\n   killTheUniverse()  // So this always gets executed!!!\n",
    "if (one)\n  doOne();\nelse if (two)\n  doTwo();\nelse if (three)\n  ; // nothing here\nelse if (four)\n  doFour();\nelse\n  launchRocket();"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
    "var b = new Boolean(false);\nif (b) // this condition is truthy\n",
    "if (cipher_char === from_char) {\n  result = result + to_char;\n  x++;\n} else {\n  result = result + clear_char;\n}\n",
    "if (x > 50) {\n  /* do the right thing */\n} else if (x > 5) {\n  /* do the right thing */\n} else {\n  /* do the right thing */\n}",
    "if (x = y) {\n  /* do the right thing */\n}\n",
    "if ((x = y)) {\n  /* do the right thing */\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
    "switch (expr) {\n  case 'Oranges':\n    console.log('Oranges are $0.59 a pound.');\n    break;\n  case 'Apples':\n    console.log('Apples are $0.32 a pound.');\n    break;\n  case 'Bananas':\n    console.log('Bananas are $0.48 a pound.');\n    break;\n  case 'Cherries':\n    console.log('Cherries are $3.00 a pound.');\n    break;\n  case 'Mangoes':\n  case 'Papayas':\n    console.log('Mangoes and papayas are $2.79 a pound.');\n    break;\n  default:\n    console.log('Sorry, we are out of ' + expr + '.');\n}\n\nconsole.log(\"Is there anything else you'd like?\");\n",
    "var foo = 0;\nswitch (foo) {\n  case -1:\n    console.log('negative 1');\n    break;\n  case 0: // foo is 0 so criteria met here so this block will run\n    console.log(0);\n    // NOTE: the forgotten break would have been here\n  case 1: // no break statement in 'case 0:' so this case will run as well\n    console.log(1);\n    break; // it encounters this break so will not continue into 'case 2:'\n  case 2:\n    console.log(2);\n    break;\n  default:\n    console.log('default');\n}",
    "var foo = 5;\nswitch (foo) {\n  case 2:\n    console.log(2);\n    break; // it encounters this break so will not continue into 'default:'\n  default:\n    console.log('default')\n    // fall-through\n  case 1:  \n    console.log('1');\n}\n",
    "var Animal = 'Giraffe';\nswitch (Animal) {\n  case 'Cow':\n  case 'Giraffe':\n  case 'Dog':\n  case 'Pig':\n    console.log('This animal will go on Noah\\'s Ark.');\n    break;\n  case 'Dinosaur':\n  default:\n    console.log('This animal will not.');\n}",
    "var foo = 1;\nvar output = 'Output: ';\nswitch (foo) {\n  case 0:\n    output += 'So ';\n  case 1:\n    output += 'What ';\n    output += 'Is ';\n  case 2:\n    output += 'Your ';\n  case 3:\n    output += 'Name';\n  case 4:\n    output += '?';\n    console.log(output);\n    break;\n  case 5:\n    output += '!';\n    console.log(output);\n    break;\n  default:\n    console.log('Please pick a number from 0 to 5!');\n}",
    "const action = 'say_hello';\nswitch (action) {\n  case 'say_hello':\n    let message = 'hello';\n    console.log(message);\n    break;\n  case 'say_hi':\n    let message = 'hi';\n    console.log(message);\n    break;\n  default:\n    console.log('Empty action received.');\n    break;\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",
    "throw 'Error2'; // generates an exception with a string value\nthrow 42;       // generates an exception with the value 42\nthrow true;     // generates an exception with the value true\nthrow new Error('Required');  // generates an error object with the message of Required\n",
    "function UserException(message) {\n   this.message = message;\n   this.name = 'UserException';\n}\nfunction getMonthName(mo) {\n   mo = mo - 1; // Adjust month number for array index (1 = Jan, 12 = Dec)\n   var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n      'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n   if (months[mo] !== undefined) {\n      return months[mo];\n   } else {\n      throw new UserException('InvalidMonthNo');\n   }\n}\n\ntry {\n   // statements to try\n   var myMonth = 15; // 15 is out of bound to raise the exception\n   var monthName = getMonthName(myMonth);\n} catch (e) {\n   monthName = 'unknown';\n   console.error(e.message, e.name); // pass exception object to err handler\n}\n",
    "/*\n * Creates a ZipCode object.\n *\n * Accepted formats for a zip code are:\n *    12345\n *    12345-6789\n *    123456789\n *    12345 6789\n *\n * If the argument passed to the ZipCode constructor does not\n * conform to one of these patterns, an exception is thrown.\n */\n\nfunction ZipCode(zip) {\n   zip = new String(zip);\n   pattern = /[0-9]{5}([- ]?[0-9]{4})?/;\n   if (pattern.test(zip)) {\n      // zip code value will be the first match in the string\n      this.value = zip.match(pattern)[0];\n      this.valueOf = function() {\n         return this.value\n      };\n      this.toString = function() {\n         return String(this.value)\n      };\n   } else {\n      throw new ZipCodeFormatException(zip);\n   }\n}\n\nfunction ZipCodeFormatException(value) {\n   this.value = value;\n   this.message = 'does not conform to the expected format for a zip code';\n   this.toString = function() {\n      return this.value + this.message;\n   };\n}\n\n/*\n * This could be in a script that validates address data\n * for US addresses.\n */\n\nconst ZIPCODE_INVALID = -1;\nconst ZIPCODE_UNKNOWN_ERROR = -2;\n\nfunction verifyZipCode(z) {\n   try {\n      z = new ZipCode(z);\n   } catch (e) {\n      if (e instanceof ZipCodeFormatException) {\n         return ZIPCODE_INVALID;\n      } else {\n         return ZIPCODE_UNKNOWN_ERROR;\n      }\n   }\n   return z;\n}\n\na = verifyZipCode(95060);         // returns 95060\nb = verifyZipCode(9560);          // returns -1\nc = verifyZipCode('a');           // returns -1\nd = verifyZipCode('95060');       // returns 95060\ne = verifyZipCode('95060 1234');  // returns 95060 1234\n",
    "try {\n   throw n; // throws an exception with a numeric value\n} catch (e) {\n   if (e <= 50) {\n      // statements to handle exceptions 1-50\n   } else {\n      // cannot handle this exception, so rethrow\n      throw e;\n   }\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
    "try {\n  throw 'myException'; // generates an exception\n}\ncatch (e) {\n  // statements to handle any exceptions\n  logMyErrors(e); // pass exception object to error handler\n}\n",
    "try {\n  myroutine(); // may throw three types of exceptions\n} catch (e) {\n  if (e instanceof TypeError) {\n    // statements to handle TypeError exceptions\n  } else if (e instanceof RangeError) {\n    // statements to handle RangeError exceptions\n  } else if (e instanceof EvalError) {\n    // statements to handle EvalError exceptions\n  } else {\n    // statements to handle any unspecified exceptions\n    logMyErrors(e); // pass exception object to error handler\n  }\n}\n",
    "try {\n  myRoutine();\n} catch (e) {\n  if (e instanceof RangeError) {\n    // statements to handle this very common expected error\n  } else {\n    throw e;  // re-throw the error unchanged\n  }\n}\n",
    "try {\n  myroutine(); // may throw three types of exceptions\n} catch (e if e instanceof TypeError) {\n  // statements to handle TypeError exceptions\n} catch (e if e instanceof RangeError) {\n  // statements to handle RangeError exceptions\n} catch (e if e instanceof EvalError) {\n  // statements to handle EvalError exceptions\n} catch (e) {\n  // statements to handle any unspecified exceptions\n  logMyErrors(e); // pass exception object to error handler\n}",
    "function isValidJSON(text) {\n  try {\n    JSON.parse(text);\n    return true;\n  } catch {\n    return false;\n  }\n}\n",
    "openMyFile();\ntry {\n  // tie up a resource\n  writeMyFile(theData);\n}\nfinally {\n  closeMyFile(); // always close the resource\n}\n",
    "try {\n  try {\n    throw new Error('oops');\n  }\n  finally {\n    console.log('finally');\n  }\n}\ncatch (ex) {\n  console.error('outer', ex.message);\n}\n\n// Output:\n// \"finally\"\n// \"outer\" \"oops\"\n",
    "try {\n  try {\n    throw new Error('oops');\n  }\n  catch (ex) {\n    console.error('inner', ex.message);\n  }\n  finally {\n    console.log('finally');\n  }\n}\ncatch (ex) {\n  console.error('outer', ex.message);\n}\n\n// Output:\n// \"inner\" \"oops\"\n// \"finally\"\n",
    "try {\n  try {\n    throw new Error('oops');\n  }\n  catch (ex) {\n    console.error('inner', ex.message);\n    throw ex;\n  }\n  finally {\n    console.log('finally');\n  }\n}\ncatch (ex) {\n  console.error('outer', ex.message);\n}\n\n// Output:\n// \"inner\" \"oops\"\n// \"finally\"\n// \"outer\" \"oops\"\n",
    "(function() {\n  try {\n    try {\n      throw new Error('oops');\n    }\n    catch (ex) {\n      console.error('inner', ex.message);\n      throw ex;\n    }\n    finally {\n      console.log('finally');\n      return;\n    }\n  }\n  catch (ex) {\n    console.error('outer', ex.message);\n  }\n})();\n\n// Output:\n// \"inner\" \"oops\"\n// \"finally\""
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
    "function x() {\n  y = 1;     // Throws a ReferenceError in strict mode.\n  var z = 2;\n}\n\nx();\n\nconsole.log(y); // 1\nconsole.log(z); // Throws a ReferenceError: z is not defined outside x.\n",
    "console.log(a);                // \"ReferenceError\"\nconsole.log('still going...'); // still going...",
    "var a = 1;\nconsole.log(a);                // 1\nconsole.log('still going...'); // still going...",
    "var a = 1;\nb = 2;\n\ndelete this.a; // Throws a TypeError in strict mode. Fails silently otherwise.\ndelete this.b;\n\nconsole.log(a, b); // Throws a ReferenceError.\n// The 'b' property was deleted and no longer exists.",
    "bla = 2;\nvar bla;\n\n// ...is implicitly understood as:\n\nvar bla;\nbla = 2;\n",
    "function do_something() {\n  console.log(bar); // undefined\n  var bar = 111;\n  console.log(bar); // 111\n}\n\n// ...is implicitly understood as:\n\nfunction do_something() {\n  var bar;\n  console.log(bar); // undefined\n  bar = 111;\n  console.log(bar); // 111\n}\n",
    "var a = 0, b = 0;\n",
    "var a = 'A';\nvar b = a;\n\n// ...is equivalent to:\n\nvar a, b = a = 'A';\n",
    "var x = y, y = 'A';\nconsole.log(x + y); // undefinedA\n",
    "var x = 0;\nfunction f() {\n  var x = y = 1; // Declares x locally; declares y globally.\n}\nf();\n\nconsole.log(x, y); // 0 1\n\n// In non-strict mode:\n// x is the global one as expected;\n// y is leaked outside of the function, though!",
    "'use strict';\n\nvar x = 0;\nfunction f() {\n  var x = y = 1; // Throws a ReferenceError in strict mode.\n}\nf();\n\nconsole.log(x, y);",
    "var x = 0; // Declares x within file scope, then assigns it a value of 0.\n\nconsole.log(typeof z); // \"undefined\", since z doesn't exist yet\n\nfunction a() {\n  var y = 2; // Declares y within scope of function a, then assigns it a value of 2.\n\n  console.log(x, y); // 0 2\n\n  function b() {\n    x = 3; // Assigns 3 to existing file scoped x.\n    y = 4; // Assigns 4 to existing outer y.\n    z = 5; // Creates a new global variable z, and assigns it a value of 5.\n           // (Throws a ReferenceError in strict mode.)\n  }\n\n  b(); // Creates z as a global variable.\n  console.log(x, y, z); // 3 4 5\n}\n\na(); // Also calls b.\nconsole.log(x, z);     // 3 5\nconsole.log(typeof y); // \"undefined\", as y is local to function a"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
    "function varTest() {\n  var x = 1;\n  {\n    var x = 2;  // same variable!\n    console.log(x);  // 2\n  }\n  console.log(x);  // 2\n}\n\nfunction letTest() {\n  let x = 1;\n  {\n    let x = 2;  // different variable\n    console.log(x);  // 2\n  }\n  console.log(x);  // 1\n}\n",
    "var x = 'global';\nlet y = 'global';\nconsole.log(this.x); // \"global\"\nconsole.log(this.y); // undefined\n",
    "var Thing;\n\n{\n  let privateScope = new WeakMap();\n  let counter = 0;\n\n  Thing = function() {\n    this.someProperty = 'foo';\n    \n    privateScope.set(this, {\n      hidden: ++counter,\n    });\n  };\n\n  Thing.prototype.showPublic = function() {\n    return this.someProperty;\n  };\n\n  Thing.prototype.showPrivate = function() {\n    return privateScope.get(this).hidden;\n  };\n}\n\nconsole.log(typeof privateScope);\n// \"undefined\"\n\nvar thing = new Thing();\n\nconsole.log(thing);\n// Thing {someProperty: \"foo\"}\n\nthing.showPublic();\n// \"foo\"\n\nthing.showPrivate();\n// 1\n",
    "if (x) {\n  let foo;\n  let foo; // SyntaxError thrown.\n}\n",
    "let x = 1;\nswitch(x) {\n  case 0:\n    let foo;\n    break;\n    \n  case 1:\n    let foo; // SyntaxError for redeclaration.\n    break;\n}",
    "let x = 1;\n\nswitch(x) {\n  case 0: {\n    let foo;\n    break;\n  }  \n  case 1: {\n    let foo;\n    break;\n  }\n}",
    "function do_something() {\n  console.log(bar); // undefined\n  console.log(foo); // ReferenceError\n  var bar = 1;\n  let foo = 2;\n}",
    "// prints out 'undefined'\nconsole.log(typeof undeclaredVariable);\n\n// results in a 'ReferenceError'\nconsole.log(typeof i);\nlet i = 10;",
    "function test(){\n   var foo = 33;\n   if(foo) {\n      let foo = (foo + 55); // ReferenceError\n   }\n}\ntest();",
    "function go(n) {\n  // n here is defined!\n  console.log(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError\n    console.log(n);\n  }\n}\n\ngo({a: [1, 2, 3]});\n",
    "var a = 1;\nvar b = 2;\n\nif (a === 1) {\n  var a = 11; // the scope is global\n  let b = 22; // the scope is inside the if-block\n\n  console.log(a);  // 11\n  console.log(b);  // 22\n} \n\nconsole.log(a); // 11\nconsole.log(b); // 2\n",
    "let x = 1;\n\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",
    "// NOTE: Constants can be declared with uppercase or lowercase, but a common\n// convention is to use all-uppercase letters.\n\n// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this will throw an error - Uncaught TypeError: Assignment to constant variable.\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log('my favorite number is: ' + MY_FAV);\n\n// trying to redeclare a constant throws an error -  Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// the name MY_FAV is reserved for constant above, so this will fail too\nvar MY_FAV = 20;\n\n// this throws an error too\nlet MY_FAV = 20;\n\n// it's important to note the nature of block scoping\nif (MY_FAV === 7) { \n    // this is fine and creates a block scoped MY_FAV variable \n    // (works equally well with let to declare a block scoped non const variable)\n    let MY_FAV = 20;\n\n    // MY_FAV is now 20\n    console.log('my favorite number is ' + MY_FAV);\n\n    // this gets hoisted into the global context and throws an error\n    var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log('my favorite number is ' + MY_FAV);\n\n// throws an error - Uncaught SyntaxError: Missing initializer in const declaration\nconst FOO; \n\n// const also works on objects\nconst MY_OBJECT = {'key': 'value'};\n\n// Attempting to overwrite the object throws an error - Uncaught TypeError: Assignment to constant variable.\nMY_OBJECT = {'OTHER_KEY': 'value'};\n\n// However, object keys are not protected,\n// so the following statement is executed without problem\nMY_OBJECT.key = 'otherValue'; // Use Object.freeze() to make object immutable\n\n// The same applies to arrays\nconst MY_ARRAY = [];\n// It's possible to push items into the array\nMY_ARRAY.push('A'); // [\"A\"]\n// However, assigning a new array to the variable throws an error - Uncaught TypeError: Assignment to constant variable.\nMY_ARRAY = ['B'];"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",
    "var hoisted = \"foo\" in this;\nconsole.log(`'foo' name ${hoisted ? \"is\" : \"is not\"} hoisted. typeof foo is ${typeof foo}`);\nif (false) {\n  function foo(){ return 1; }\n}\n\n// In Chrome: \n// 'foo' name is hoisted. typeof foo is undefined\n// \n// In Firefox:\n// 'foo' name is hoisted. typeof foo is undefined\n//\n// In Edge:\n// 'foo' name is not hoisted. typeof foo is undefined\n// \n// In Safari:\n// 'foo' name is hoisted. typeof foo is function\n",
    "var hoisted = \"foo\" in this;\nconsole.log(`'foo' name ${hoisted ? \"is\" : \"is not\"} hoisted. typeof foo is ${typeof foo}`);\nif (true) {\n  function foo(){ return 1; }\n}\n\n// In Chrome: \n// 'foo' name is hoisted. typeof foo is undefined\n// \n// In Firefox:\n// 'foo' name is hoisted. typeof foo is undefined\n//\n// In Edge:\n// 'foo' name is not hoisted. typeof foo is undefined\n// \n// In Safari:\n// 'foo' name is hoisted. typeof foo is function\n",
    "hoisted(); // logs \"foo\"\n\nfunction hoisted() {\n  console.log('foo');\n}\n",
    "notHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function() {\n   console.log('bar');\n};\n",
    "function calc_sales(units_a, units_b, units_c) {\n   return units_a * 79 + units_b * 129 + units_c * 699;\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",
    "function* idMaker() {\n  var index = 0;\n  while (true)\n    yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // 3\n// ...",
    "function* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i) {\n  yield i;\n  yield* anotherGenerator(i);\n  yield i + 10;\n}\n\nvar gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n",
    "function* logGenerator() {\n  console.log(0);\n  console.log(1, yield);\n  console.log(2, yield);\n  console.log(3, yield);\n}\n\nvar gen = logGenerator();\n\n// the first call of next executes from the start of the function\n// until the first yield statement\ngen.next();             // 0\ngen.next('pretzel');    // 1 pretzel\ngen.next('california'); // 2 california\ngen.next('mayonnaise'); // 3 mayonnaise\n",
    "function* yieldAndReturn() {\n  yield \"Y\";\n  return \"R\";\n  yield \"unreachable\";\n}\n\nvar gen = yieldAndReturn()\nconsole.log(gen.next()); // { value: \"Y\", done: false }\nconsole.log(gen.next()); // { value: \"R\", done: true }\nconsole.log(gen.next()); // { value: undefined, done: true }\n",
    "const someObj = {\n  *generator () {\n    yield 'a';\n    yield 'b';\n  }\n}\n\nconst gen = someObj.generator()\n\nconsole.log(gen.next()); // { value: 'a', done: false }\nconsole.log(gen.next()); // { value: 'b', done: false }\nconsole.log(gen.next()); // { value: undefined, done: true }\n",
    "class Foo {\n  *generator () {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\n\nconst f = new Foo ();\nconst gen = f.generator();\n\nconsole.log(gen.next()); // { value: 1, done: false }\nconsole.log(gen.next()); // { value: 2, done: false }\nconsole.log(gen.next()); // { value: 3, done: false }\nconsole.log(gen.next()); // { value: undefined, done: true }\n",
    "class Foo {\n  *[Symbol.iterator] () {\n    yield 1;\n    yield 2;\n  }\n}\n\nconst SomeObj = {\n  *[Symbol.iterator] () {\n    yield 'a';\n    yield 'b';\n  }\n}\n\nconsole.log(Array.from(new Foo)); // [ 1, 2 ]\nconsole.log(Array.from(SomeObj)); // [ 'a', 'b' ]\n",
    "function* f() {}\nvar obj = new f; // throws \"TypeError: f is not a constructor\n",
    "const foo = function* () {\n  yield 10;\n  yield 20;\n};\n\nconst bar = foo();\nconsole.log(bar.next()); // {value: 10, done: false}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
    "function resolveAfter2Seconds() {\n  console.log(\"starting slow promise\")\n  return new Promise(resolve => {\n    setTimeout(function() {\n      resolve(\"slow\")\n      console.log(\"slow promise is done\")\n    }, 2000)\n  })\n}\n\nfunction resolveAfter1Second() {\n  console.log(\"starting fast promise\")\n  return new Promise(resolve => {\n    setTimeout(function() {\n      resolve(\"fast\")\n      console.log(\"fast promise is done\")\n    }, 1000)\n  })\n}\n\nasync function sequentialStart() {\n  console.log('==SEQUENTIAL START==')\n\n  // 1. Execution gets here almost instantly\n  const slow = await resolveAfter2Seconds()\n  console.log(slow) // 2. this runs 2 seconds after 1.\n\n  const fast = await resolveAfter1Second()\n  console.log(fast) // 3. this runs 3 seconds after 1.\n}\n\nasync function concurrentStart() {\n  console.log('==CONCURRENT START with await==');\n  const slow = resolveAfter2Seconds() // starts timer immediately\n  const fast = resolveAfter1Second() // starts timer immediately\n\n  // 1. Execution gets here almost instantly\n  console.log(await slow) // 2. this runs 2 seconds after 1.\n  console.log(await fast) // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved\n}\n\nfunction concurrentPromise() {\n  console.log('==CONCURRENT START with Promise.all==')\n  return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {\n    console.log(messages[0]) // slow\n    console.log(messages[1]) // fast\n  })\n}\n\nasync function parallel() {\n  console.log('==PARALLEL with await Promise.all==')\n  \n  // Start 2 \"jobs\" in parallel and wait for both of them to complete\n  await Promise.all([\n      (async()=>console.log(await resolveAfter2Seconds()))(),\n      (async()=>console.log(await resolveAfter1Second()))()\n  ])\n}\n\n// This function does not handle errors. See warning below!\nfunction parallelPromise() {\n  console.log('==PARALLEL with Promise.then==')\n  resolveAfter2Seconds().then((message)=>console.log(message))\n  resolveAfter1Second().then((message)=>console.log(message))\n}\n\nsequentialStart() // after 2 seconds, logs \"slow\", then after 1 more second, \"fast\"\n\n// wait above to finish\nsetTimeout(concurrentStart, 4000) // after 2 seconds, logs \"slow\" and then \"fast\"\n\n// wait again\nsetTimeout(concurrentPromise, 7000) // same as concurrentStart\n\n// wait again\nsetTimeout(parallel, 10000) // truly parallel: after 1 second, logs \"fast\", then after 1 more second, \"slow\"\n\n// wait again\nsetTimeout(parallelPromise, 13000) // same as parallel\n",
    "function getProcessedData(url) {\n  return downloadData(url) // returns a promise\n    .catch(e => {\n      return downloadFallbackData(url)  // returns a promise\n    })\n    .then(v => {\n      return processDataInWorker(v)  // returns a promise\n    }) \n}\n",
    "async function getProcessedData(url) {\n  let v\n  try {\n    v = await downloadData(url)\n  } catch(e) {\n    v = await downloadFallbackData(url)\n  }\n  return processDataInWorker(v)\n}\n",
    "async function getProcessedData(url) {\n  let v\n  try {\n    v = await downloadData(url)\n  } catch(e) {\n    v = await downloadFallbackData(url)\n  }\n  try {\n    return await processDataInWorker(v)  // Note the `return await` vs. just `return`\n  } catch (e) {\n    return null\n  }\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",
    "function square(x) {\n   return x * x;\n}\nvar demo = square(3);\n// demo will equal 9\n",
    "return;\nreturn true;\nreturn false;\nreturn x;\nreturn x + y / 3;\n",
    "return\na + b;\n",
    "return; \na + b;\n",
    "return (\n  a + b\n);\n",
    "function counter() {\n  for (var count = 1; ; count++) {  // infinite loop\n    console.log(count + 'A'); // until 5\n      if (count === 5) {          \n        return;\n      }\n      console.log(count + 'B');  // until 4\n    }\n  console.log(count + 'C');  // never appears\n}\n\ncounter();\n\n// Output:\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n",
    "function magic() {\n  return function calc(x) { return x * 42; };\n}\n\nvar answer = magic();\nanswer(1337); // 56154\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class",
    "class Polygon {\n  constructor(height, width) {\n    this.name = 'Polygon';\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass Square extends Polygon {\n  constructor(length) {\n    super(length, length);\n    this.name = 'Square';\n  }\n}",
    "class Foo {};\nclass Foo {}; // Uncaught SyntaxError: Identifier 'Foo' has already been declared\n",
    "let Foo = class {};\nclass Foo {}; // Uncaught TypeError: Identifier 'Foo' has already been declared\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while",
    "var result = '';\nvar i = 0;\ndo {\n   i += 1;\n   result += i + ' ';\n} while (i > 0 && i < 5); // Despite i == 0 this will still loop as it starts off without the test\ndocument.getElementById('example').innerHTML = result;"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
    "for (let i = 0; i < 9; i++) {\n   console.log(i);\n   // more statements\n}\n",
    "var i = 0;\nfor (; i < 9; i++) {\n    console.log(i);\n    // more statements\n}\n",
    "for (let i = 0;; i++) {\n   console.log(i);\n   if (i > 3) break;\n   // more statements\n}",
    "var i = 0;\n\nfor (;;) {\n  if (i > 3) break;\n  console.log(i);\n  i++;\n}\n",
    "function showOffsetPos(sId) {\n\n  var nLeft = 0, nTop = 0;\n\n  for (\n\n    var oItNode = document.getElementById(sId); /* initialization */\n\n    oItNode; /* condition */\n\n    nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent /* final-expression */\n\n  ); /* semicolon */ \n\n  console.log('Offset position of \\'' + sId + '\\' element:\\n left: ' + nLeft + 'px;\\n top: ' + nTop + 'px;');\n\n}\n\n/* Example call: */\n\nshowOffsetPos('content');\n\n// Output:\n// \"Offset position of \"content\" element:\n// left: 0px;\n// top: 153px;\""
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in",
    "var sum = 0;\nvar obj = {prop1: 5, prop2: 13, prop3: 8};\n\nfor each (var item in obj) {\n  sum += item;\n}\n\nconsole.log(sum); // logs \"26\", which is 5+13+8"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",
    "var obj = {a: 1, b: 2, c: 3};\n    \nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n}\n\n// Output:\n// \"obj.a = 1\"\n// \"obj.b = 2\"\n// \"obj.c = 3\"",
    "var triangle = {a: 1, b: 2, c: 3};\n\nfunction ColoredTriangle() {\n  this.color = 'red';\n}\n\nColoredTriangle.prototype = triangle;\n\nvar obj = new ColoredTriangle();\n\nfor (const prop in obj) {\n  if (obj.hasOwnProperty(prop)) {\n    console.log(`obj.${prop} = ${obj[prop]}`);\n  } \n}\n\n// Output:\n// \"obj.color = red\"\n",
    "var obj = {a: 1, b: 2, c: 3};\nfor (var i = 0 in obj) {\n  console.log(obj[i]);\n}\n// 1\n// 2\n// 3\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",
    "const iterable = [10, 20, 30];\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 10\n// 20\n// 30\n",
    "const iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n  value += 1;\n  console.log(value);\n}\n// 11\n// 21\n// 31\n",
    "const iterable = 'boo';\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// \"b\"\n// \"o\"\n// \"o\"\n",
    "const iterable = new Uint8Array([0x00, 0xff]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 0\n// 255\n",
    "const iterable = new Map([['a', 1], ['b', 2], ['c', 3]]);\n\nfor (const entry of iterable) {\n  console.log(entry);\n}\n// ['a', 1]\n// ['b', 2]\n// ['c', 3]\n\nfor (const [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n",
    "const iterable = new Set([1, 1, 2, 2, 3, 3]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n",
    "(function() {\n  for (const argument of arguments) {\n    console.log(argument);\n  }\n})(1, 2, 3);\n\n// 1\n// 2\n// 3",
    "// Note: This will only work in platforms that have\n// implemented NodeList.prototype[Symbol.iterator]\nconst articleParagraphs = document.querySelectorAll('article > p');\n\nfor (const paragraph of articleParagraphs) {\n  paragraph.classList.add('read');\n}\n",
    "function* foo(){ \n  yield 1; \n  yield 2; \n  yield 3; \n}; \n\nfor (const o of foo()) { \n  console.log(o); \n  break; // closes iterator, execution continues outside of the loop\n}\nconsole.log('done');\n",
    "function* fibonacci() { // a generator function\n  let [prev, curr] = [0, 1];\n  while (true) {\n    [prev, curr] = [curr, prev + curr];\n    yield curr;\n  }\n}\n\nfor (const n of fibonacci()) {\n  console.log(n);\n  // truncate the sequence at 1000\n  if (n >= 1000) {\n    break;\n  }\n}\n",
    "const gen = (function *(){\n  yield 1;\n  yield 2;\n  yield 3;\n})();\nfor (const o of gen) {\n  console.log(o);\n  break;  // Closes iterator\n}\n\n// The generator should not be re-used, the following does not make sense!\nfor (const o of gen) {\n  console.log(o); // Never called.\n}\n",
    "let range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.iterator]() {\n    return {\n      current: this.from,\n      last: this.to,\n\n      next() { // (2)\n        if (this.current <= this.last) {\n          return { done: false, value: this.current++ };\n        } else {\n          return { done: true };\n        }\n      }\n    };\n  }\n};\n\nfor(let value of range) {\n  console.log(value); // expected output: 1, then 2, then 3, then 4, then 5\n}",
    "const iterable = {\n  [Symbol.iterator]() {\n    return {\n      i: 0,\n      next() {\n        if (this.i < 3) {\n          return { value: this.i++, done: false };\n        }\n        return { value: undefined, done: true };\n      }\n    };\n  }\n};\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 0\n// 1\n// 2\n",
    "Object.prototype.objCustom = function() {}; \nArray.prototype.arrCustom = function() {};\n\nconst iterable = [3, 5, 7];\niterable.foo = 'hello';\n\nfor (const i in iterable) {\n  console.log(i); // logs 0, 1, 2, \"foo\", \"arrCustom\", \"objCustom\"\n}\n\nfor (const i in iterable) {\n  if (iterable.hasOwnProperty(i)) {\n    console.log(i); // logs 0, 1, 2, \"foo\"\n  }\n}\n\nfor (const i of iterable) {\n  console.log(i); // logs 3, 5, 7\n}\n",
    "Object.prototype.objCustom = function() {};\nArray.prototype.arrCustom = function() {}; \n\nconst iterable = [3, 5, 7]; \niterable.foo = 'hello';",
    "for (const i in iterable) {\n  console.log(i); // logs 0, 1, 2, \"foo\", \"arrCustom\", \"objCustom\" \n}",
    "for (const i in iterable) {\n  if (iterable.hasOwnProperty(i)) {\n    console.log(i); // logs 0, 1, 2, \"foo\"\n  }\n}",
    "for (const i of iterable) {\n  console.log(i); // logs 3, 5, 7 \n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
    "const asyncIterable = {\n  [Symbol.asyncIterator]() {\n    return {\n      i: 0,\n      next() {\n        if (this.i < 3) {\n          return Promise.resolve({ value: this.i++, done: false });\n        }\n\n        return Promise.resolve({ done: true });\n      }\n    };\n  }\n};\n\n(async function() {\n   for await (let num of asyncIterable) {\n     console.log(num);\n   }\n})();\n\n// 0\n// 1\n// 2\n",
    "async function* asyncGenerator() {\n  let i = 0;\n  while (i < 3) {\n    yield i++;\n  }\n}\n\n(async function() {\n  for await (let num of asyncGenerator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2",
    "async function* streamAsyncIterator(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n// Fetches data from url and calculates response size using the async generator.\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  // Will hold the size of the response, in bytes.\n  let responseSize = 0;\n  // The for-await-of loop. Async iterates over each portion of the response.\n  for await (const chunk of streamAsyncIterator(response.body)) {\n    // Incrementing the total response length.\n    responseSize += chunk.length;\n  }\n  \n  console.log(`Response Size: ${responseSize} bytes`);\n  // expected output: \"Response Size: 1071472\"\n  return responseSize;\n}\ngetResponseSize('https://jsonplaceholder.typicode.com/photos');"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while",
    "var n = 0;\nvar x = 0;\n\nwhile (n < 3) {\n  n++;\n  x += n;\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",
    "function potentiallyBuggyCode() {\n    debugger;\n    // do potentially buggy stuff to examine, step through, etc.\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
    "myModule.doAllTheAmazingThings();",
    "import {myExport} from '/modules/my-module.js';",
    "import {foo, bar} from '/modules/my-module.js';",
    "import {reallyReallyLongModuleExportName as shortName}\n  from '/modules/my-module.js';",
    "import {\n  reallyReallyLongModuleExportName as shortName,\n  anotherLongModuleName as short\n} from '/modules/my-module.js';",
    "import '/modules/my-module.js';\n",
    "import myDefault from '/modules/my-module.js';",
    "import myDefault, * as myModule from '/modules/my-module.js';\n// myModule used as a namespace",
    "import myDefault, {foo, bar} from '/modules/my-module.js';\n// specific, named imports\n",
    "import('/modules/my-module.js')\n  .then((module) => {\n    // Do something with the module.\n  });\n",
    "let module = await import('/modules/my-module.js');\n",
    "function getJSON(url, callback) {\n  let xhr = new XMLHttpRequest();\n  xhr.onload = function () { \n    callback(this.responseText) \n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n}\n\nexport function getUsefulContents(url, callback) {\n  getJSON(url, data => callback(JSON.parse(data)));\n}",
    "import { getUsefulContents } from '/modules/file.js';\n\ngetUsefulContents('http://www.example.com',\n    data => { doSomethingUseful(data); });",
    "const main = document.querySelector(\"main\");\nfor (const link of document.querySelectorAll(\"nav > a\")) {\n  link.addEventListener(\"click\", e => {\n    e.preventDefault();\n\n    import('/modules/my-module.js')\n      .then(module => {\n        module.loadPageInto(main);\n      })\n      .catch(err => {\n        main.textContent = err.message;\n      });\n  });\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label",
    "var i, j;\n\nloop1:\nfor (i = 0; i < 3; i++) {      //The first for statement is labeled \"loop1\"\n   loop2:\n   for (j = 0; j < 3; j++) {   //The second for statement is labeled \"loop2\"\n      if (i === 1 && j === 1) {\n         continue loop1;\n      }\n      console.log('i = ' + i + ', j = ' + j);\n   }\n}\n\n// Output is:\n//   \"i = 0, j = 0\"\n//   \"i = 0, j = 1\"\n//   \"i = 0, j = 2\"\n//   \"i = 1, j = 0\"\n//   \"i = 2, j = 0\"\n//   \"i = 2, j = 1\"\n//   \"i = 2, j = 2\"\n// Notice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\"\n",
    "var itemsPassed = 0;\nvar i, j;\n\ntop:\nfor (i = 0; i < items.length; i++) {\n  for (j = 0; j < tests.length; j++) {\n    if (!tests[j].pass(items[i])) {\n      continue top;\n    }\n  }\n\n  itemsPassed++;\n}",
    "var i, j;\n\nloop1:\nfor (i = 0; i < 3; i++) {      //The first for statement is labeled \"loop1\"\n   loop2:\n   for (j = 0; j < 3; j++) {   //The second for statement is labeled \"loop2\"\n      if (i === 1 && j === 1) {\n         break loop1;\n      }\n      console.log('i = ' + i + ', j = ' + j);\n   }\n}\n\n// Output is:\n//   \"i = 0, j = 0\"\n//   \"i = 0, j = 1\"\n//   \"i = 0, j = 2\"\n//   \"i = 1, j = 0\"\n// Notice the difference with the previous continue example",
    "var allPass = true;\nvar i, j;\n\ntop:\nfor (i = 0; items.length; i++)\n  for (j = 0; j < tests.length; i++)\n    if (!tests[j].pass(items[i])) {\n      allPass = false;\n      break top;\n    }",
    "foo: {\n  console.log('face');\n  break foo;\n  console.log('this will not be executed');\n}\nconsole.log('swap');\n\n// this will log:\n\n// \"face\"\n// \"swap ",
    "L: function F() {}",
    "'use strict';\nL: function F() {}\n// SyntaxError: functions cannot be labelled",
    "L: function* F() {}\n// SyntaxError: generator functions cannot be labelled\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
    "function f(x, o) {\n  with (o) {\n    console.log(x);\n  }\n}",
    "function f(foo, values) {\n  with (foo) {\n    console.log(values);\n  }\n}\n",
    "var a, x, y;\nvar r = 10;\n\nwith (Math) {\n  a = PI * r * r;\n  x = r * cos(PI);\n  y = r * sin(PI / 2);\n}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
    "// In web browsers, the window object is also the global object:\nconsole.log(this === window); // true\n\na = 37;\nconsole.log(window.a); // 37\n\nthis.b = \"MDN\";\nconsole.log(window.b)  // \"MDN\"\nconsole.log(b)         // \"MDN\"\n",
    "function f1() {\n  return this;\n}\n\n// In a browser:\nf1() === window; // true \n\n// In Node:\nf1() === global; // true",
    "function f2() {\n  'use strict'; // see strict mode\n  return this;\n}\n\nf2() === undefined; // true\n",
    "// An object can be passed as the first argument to call or apply and this will be bound to it.\nvar obj = {a: 'Custom'};\n\n// This property is set on the global object\nvar a = 'Global';\n\nfunction whatsThis() {\n  return this.a;  // The value of this is dependent on how the function is called\n}\n\nwhatsThis();          // 'Global'\nwhatsThis.call(obj);  // 'Custom'\nwhatsThis.apply(obj); // 'Custom'\n",
    "function add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// The first parameter is the object to use as\n// 'this', subsequent parameters are passed as \n// arguments in the function call\nadd.call(o, 5, 7); // 16\n\n// The first parameter is the object to use as\n// 'this', the second is an array whose\n// members are used as the arguments in the function call\nadd.apply(o, [10, 20]); // 34\n",
    "function bar() {\n  console.log(Object.prototype.toString.call(this));\n}\n\nbar.call(7);     // [object Number]\nbar.call('foo'); // [object String]\n",
    "function f() {\n  return this.a;\n}\n\nvar g = f.bind({a: 'azerty'});\nconsole.log(g()); // azerty\n\nvar h = g.bind({a: 'yoo'}); // bind only works once!\nconsole.log(h()); // azerty\n\nvar o = {a: 37, f: f, g: g, h: h};\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37,37, azerty, azerty\n",
    "var globalObject = this;\nvar foo = (() => this);\nconsole.log(foo() === globalObject); // true",
    "// Call as a method of an object\nvar obj = {func: foo};\nconsole.log(obj.func() === globalObject); // true\n\n// Attempt to set this using call\nconsole.log(foo.call(obj) === globalObject); // true\n\n// Attempt to set this using bind\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true",
    "// Create obj with a method bar that returns a function that\n// returns its this. The returned function is created as \n// an arrow function, so its this is permanently bound to the\n// this of its enclosing function. The value of bar can be set\n// in the call, which in turn sets the value of the \n// returned function.\nvar obj = {\n  bar: function() {\n    var x = (() => this);\n    return x;\n  }\n};\n\n// Call bar as a method of obj, setting its this to obj\n// Assign a reference to the returned function to fn\nvar fn = obj.bar();\n\n// Call fn without setting this, would normally default\n// to the global object or undefined in strict mode\nconsole.log(fn() === obj); // true\n\n// But caution if you reference the method of obj without calling it\nvar fn2 = obj.bar;\n// Calling the arrow function's this from inside the bar method()\n// will now return window, because it follows the this from fn2.\nconsole.log(fn2()() == window); // true\n",
    "var o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // 37\n",
    "var o = {prop: 37};\n\nfunction independent() {\n  return this.prop;\n}\n\no.f = independent;\n\nconsole.log(o.f()); // 37\n",
    "o.b = {g: independent, prop: 42};\nconsole.log(o.b.g()); // 42\n",
    "var o = {f: function() { return this.a + this.b; }};\nvar p = Object.create(o);\np.a = 1;\np.b = 4;\n\nconsole.log(p.f()); // 5\n",
    "function sum() {\n  return this.a + this.b + this.c;\n}\n\nvar o = {\n  a: 1,\n  b: 2,\n  c: 3,\n  get average() {\n    return (this.a + this.b + this.c) / 3;\n  }\n};\n\nObject.defineProperty(o, 'sum', {\n    get: sum, enumerable: true, configurable: true});\n\nconsole.log(o.average, o.sum); // 2, 6\n",
    "/*\n * Constructors work like this:\n *\n * function MyConstructor(){\n *   // Actual function body code goes here.  \n *   // Create properties on |this| as\n *   // desired by assigning to them.  E.g.,\n *   this.fum = \"nom\";\n *   // et cetera...\n *\n *   // If the function has a return statement that\n *   // returns an object, that object will be the\n *   // result of the |new| expression.  Otherwise,\n *   // the result of the expression is the object\n *   // currently bound to |this|\n *   // (i.e., the common case most usually seen).\n * }\n */\n\nfunction C() {\n  this.a = 37;\n}\n\nvar o = new C();\nconsole.log(o.a); // 37\n\n\nfunction C2() {\n  this.a = 37;\n  return {a: 38};\n}\n\no = new C2();\nconsole.log(o.a); // 38\n",
    "// When called as a listener, turns the related element blue\nfunction bluify(e) {\n  // Always true\n  console.log(this === e.currentTarget);\n  // true when currentTarget and target are the same object\n  console.log(this === e.target);\n  this.style.backgroundColor = '#A5D9F3';\n}\n\n// Get a list of every element in the document\nvar elements = document.getElementsByTagName('*');\n\n// Add bluify as a click listener so when the\n// element is clicked on, it turns blue\nfor (var i = 0; i < elements.length; i++) {\n  elements[i].addEventListener('click', bluify, false);\n}",
    "<button onclick=\"alert(this.tagName.toLowerCase());\">\n  Show this\n</button>\n",
    "<button onclick=\"alert((function() { return this; })());\">\n  Show inner this\n</button>\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
    "console.log(notHoisted) // undefined \n//  even though the variable name is hoisted, the definition isn't. so it's undefined.\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function() {\n   console.log('bar');\n};\n",
    "let math = {\n  'factit': function factorial(n) {\n    console.log(n)\n    if (n <= 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  }\n};\n\nmath.factit(3) //3;2;1;\n",
    "var foo = function() {}\nfoo.name // \"foo\"\n\nvar foo2 = foo\nfoo2.name // \"foo\"\n\nvar bar = function baz() {}\nbar.name // \"baz\"\n\nconsole.log(foo === foo2); // true\nconsole.log(typeof baz); // undefined\nconsole.log(bar === baz); // false (errors because baz == undefined)\n",
    "var x = function(y) {\n   return y * y;\n};\n",
    "button.addEventListener('click', function(event) {\n    console.log('button is clicked!')\n})"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
    "const Foo = class {\n  constructor() {}\n  bar() {\n    return 'Hello World!';\n  }\n};\n\nconst instance = new Foo();\ninstance.bar();  // \"Hello World!\"\nFoo.name;        // \"Foo\"\n",
    "const Foo = class NamedFoo {\n  constructor() {}\n  whoIsThere() {\n    return NamedFoo.name;\n  }\n}\nconst bar = new Foo();\nbar.whoIsThere();  // \"NamedFoo\"\nNamedFoo.name;     // ReferenceError: NamedFoo is not defined\nFoo.name;          // \"NamedFoo\"\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
    "let x = function*(y) {\n   yield y * y;\n};\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
    "function* countAppleSales () {\n  let saleList = [3, 7, 5]\n  for (let i = 0; i < saleList.length; i++) {\n    yield saleList[i]\n  }\n}",
    "let appleStore = countAppleSales()  // Generator { }\nconsole.log(appleStore.next())      // { value: 3, done: false }\nconsole.log(appleStore.next())      // { value: 7, done: false }\nconsole.log(appleStore.next())      // { value: 5, done: false }\nconsole.log(appleStore.next())      // { value: undefined, done: true }"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
    "function* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nconst iterator = g2();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: 5, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n",
    "function* g3() {\n  yield* [1, 2];\n  yield* '34';\n  yield* Array.from(arguments);\n}\n\nconst iterator = g3(5, 6);\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: \"3\", done: false}\nconsole.log(iterator.next()); // {value: \"4\", done: false}\nconsole.log(iterator.next()); // {value: 5, done: false}\nconsole.log(iterator.next()); // {value: 6, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n",
    "function* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nfunction* g5() {\n  const g4ReturnValue = yield* g4();\n  console.log(g4ReturnValue) // 'foo'\n  return g4ReturnValue;\n}\n\nconst iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false} done is false because g5 generator isn't finished, only g4\nconsole.log(iterator.next()); // {value: 'foo', done: true}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
    "function resolveAfter2Seconds(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n};\n\n\nconst add = async function(x) { // async function expression assigned to a variable\n  let a = await resolveAfter2Seconds(20);\n  let b = await resolveAfter2Seconds(30);\n  return x + a + b;\n};\n\nadd(10).then(v => {\n  console.log(v);  // prints 60 after 4 seconds.\n});\n\n\n(async function(x) { // async function expression used as an IIFE\n  let p_a = resolveAfter2Seconds(20);\n  let p_b = resolveAfter2Seconds(30);\n  return x + await p_a + await p_b;\n})(10).then(v => {\n  console.log(v);  // prints 60 after 2 seconds.\n});\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
    "function resolveAfter2Seconds(x) { \n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();\n",
    "async function f2() {\n  const thenable = {\n    then: function(resolve, _reject) {\n      resolve('resolved!')\n    }\n  };\n  console.log(await thenable); // resolved!\n}\n\nf2();\n",
    "async function f3() {\n  var y = await 20;\n  console.log(y); // 20\n}\n\nf3();",
    "async function f4() {\n  try {\n    var z = await Promise.reject(30);\n  } catch(e) {\n    console.error(e); // 30\n  }\n}\n\nf4();",
    "var response = await promisedFunction().catch((err) => { console.error(err); });\n// response will be undefined if the promise is rejected\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
    "let object = {}",
    "let object = {\n  foo: 'bar',\n  age: 42,\n  baz: {myProp: 12}\n}",
    "object.foo // \"bar\"\nobject['age'] // 42\n\nobject.foo = 'baz'\n",
    "let a = 'foo', \n    b = 42,\n    c = {};\n\nlet o = { \n  a: a,\n  b: b,\n  c: c\n}",
    "let a = 'foo', \n    b = 42, \n    c = {};\n\n// Shorthand property names (ES2015)\nlet o = {a, b, c}\n\n// In other words,\nconsole.log((o.a === {a}.a)) // true\n",
    "let a = {x: 1, x: 2}\nconsole.log(a) // {x: 2}\n",
    "function haveES2015DuplicatePropertySemantics() {\n  'use strict';\n  try {\n    ({prop: 1, prop: 2});\n\n    // No error thrown, duplicate property names allowed in strict mode\n    return true;\n  } catch(e) {\n    // Error thrown, duplicates prohibited in strict mode\n    return false;\n  }\n}",
    "// Computed property names (ES2015)\nlet i = 0\nlet a = {\n  ['foo' + ++i]: i,\n  ['foo' + ++i]: i,\n  ['foo' + ++i]: i\n}\n\nconsole.log(a.foo1) // 1\nconsole.log(a.foo2) // 2\nconsole.log(a.foo3) // 3\n\nlet param = 'size'\nlet config = {\n  [param]: 12,\n  ['mobile' + param.charAt(0).toUpperCase() + param.slice(1)]: 4\n}\n\nconsole.log(config) // {size: 12, mobileSize: 4}",
    "let obj1 = { foo: 'bar', x: 42 }\nlet obj2 = { foo: 'baz', y: 13 }\n\nlet clonedObj = { ...obj1 }\n// Object { foo: \"bar\", x: 42 }\n\nlet mergedObj = { ...obj1, ...obj2 }\n// Object { foo: \"baz\", x: 42, y: 13 }",
    "let obj1 = {}\nassert(Object.getPrototypeOf(obj1) === Object.prototype)\n\nlet obj2 = {__proto__: null}\nassert(Object.getPrototypeOf(obj2) === null)\n\nlet protoObj = {}\nlet obj3 = {'__proto__': protoObj}\nassert(Object.getPrototypeOf(obj3) === protoObj)\n\nlet obj4 = {__proto__: 'not an object or null'}\nassert(Object.getPrototypeOf(obj4) === Object.prototype)\nassert(!obj4.hasOwnProperty('__proto__'))\n",
    "let __proto__ = 'variable'\n\nlet obj1 = {__proto__}\nassert(Object.getPrototypeOf(obj1) === Object.prototype)\nassert(obj1.hasOwnProperty('__proto__'))\nassert(obj1.__proto__ === 'variable')\n\nlet obj2 = {__proto__() { return 'hello'; }}\nassert(obj2.__proto__() === 'hello')\n\nlet obj3 = {['__prot' + 'o__']: 17}\nassert(obj3.__proto__ === 17)\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "/ab+c/i\nnew RegExp(/ab+c/, 'i') // literal notation\nnew RegExp('ab+c', 'i') // constructor\n",
    "let re = /\\w+/\nlet re = new RegExp('\\\\w+')\n",
    "let re = /(\\w+)\\s(\\w+)/\nlet str = 'John Smith'\nlet newstr = str.replace(re, '$2, $1')\nconsole.log(newstr)\n",
    "let text = 'Some text\\nAnd some more\\r\\nAnd yet\\rThis is the end'\nlet lines = text.split(/\\r\\n|\\r|\\n/)\nconsole.log(lines) // logs [ 'Some text', 'And some more', 'And yet', 'This is the end' ]\n",
    "let s = 'Please yes\\nmake my day!'\n\ns.match(/yes.*day/);\n// Returns null\n\ns.match(/yes[^]*day/);\n// Returns [\"yes\\nmake my day\"]\n",
    "let str = '#foo#'\nlet regex = /foo/y\n\nregex.lastIndex = 1\nregex.test(str)      // true\nregex.lastIndex = 5\nregex.test(str)      // false (lastIndex is taken into account with sticky flag)\nregex.lastIndex      // 0 (reset after match failure)",
    "re = /\\d/y;\nwhile (r = re.exec(\"123 456\")) console.log(r, \"AND re.lastIndex\", re.lastIndex);\n\n// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1\n// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2\n// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3\n//   ... and no more match.",
    "let text = 'Образец text на русском языке'\nlet regex = /[\\u0400-\\u04FF]+/g\n\nlet match = regex.exec(text)\nconsole.log(match[0])        // logs 'Образец'\nconsole.log(regex.lastIndex) // logs '7'\n\nlet match2 = regex.exec(text)\nconsole.log(match2[0])       // logs 'на' [did not log 'text']\nconsole.log(regex.lastIndex) // logs '15'\n\n// and so on\n",
    "let url = 'http://xxx.domain.com'\nconsole.log(/[^.]+/.exec(url)[0].substr(7)) // logs 'xxx'\n",
    "// Firefox 33 or older\n'x'.replace(/x(.)?/g, function(m, group) {\n  console.log(\"'group:\" + group + \"'\");\n}); \n// 'group:'\n\n// Firefox 34 or newer\n'x'.replace(/x(.)?/g, function(m, group) {\n  console.log(\"'group:\" + group + \"'\");\n}); \n// 'group:undefined'\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
    "var a = 1;\nvar b = 2;\nvar c = 3;\n\n// default precedence\na + b * c     // 7\n// evaluated by default like this\na + (b * c)   // 7\n\n// now overriding precedence \n// addition before multiplication   \n(a + b) * c   // 9\n\n// which is equivalent to\na * c + b * c // 9\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "typeof null          // \"object\" (not \"null\" for legacy reasons)\ntypeof undefined     // \"undefined\"\nnull === undefined   // false\nnull  == undefined   // true\nnull === null        // true\nnull == null         // true\n!null                // true\nisNaN(1 + null)      // false\nisNaN(1 + undefined) // true"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors",
    "const object = {};\n\nobject.$1 = 'foo';\nconsole.log(object.$1);  // 'foo'\n\nobject.1 = 'bar';        // SyntaxError\nconsole.log(object.1);   // SyntaxError\n",
    "document.createElement('pre')\n",
    "77 .toExponential()\n// or\n77\n.toExponential()\n// or\n;(77).toExponential()\n// or\n77..toExponential()\n// or\n77.0.toExponential()\n// because 77. === 77.0, no ambiguity",
    "document['createElement']('pre')\n",
    "document ['createElement']('pre')",
    "let object = {}\nobject['1'] = 'value'\nconsole.log(object[1])\n",
    "let foo = {unique_prop: 1}, bar = {unique_prop: 2}, object = {};\nobject[foo] = 'value'\nconsole.log(object[bar])\n",
    "x = eval('document.forms.form_name.elements.' + strFormControl + '.value')\n",
    "x = document.forms['form_name'].elements[strFormControl].value\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
    "function Car() {}\ncar1 = new Car();\ncar2 = new Car();\n \nconsole.log(car1.color);    // undefined\n \nCar.prototype.color = 'original color';\nconsole.log(car1.color);    // 'original color'\n \ncar1.color = 'black';\nconsole.log(car1.color);    // 'black'\n\nconsole.log(Object.getPrototypeOf(car1).color); // 'original color'\nconsole.log(Object.getPrototypeOf(car2).color); // 'original color'\nconsole.log(car1.color);   // 'black'\nconsole.log(car2.color);   // 'original color'\n",
    "function Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n",
    "var myCar = new Car('Eagle', 'Talon TSi', 1993);\n",
    "var kensCar = new Car('Nissan', '300ZX', 1992);\n",
    "function Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\n",
    "var rand = new Person('Rand McNally', 33, 'M');\nvar ken = new Person('Ken Jones', 39, 'M');\n",
    "function Car(make, model, year, owner) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n  this.owner = owner;\n}\n",
    "var car1 = new Car('Eagle', 'Talon TSi', 1993, rand);\nvar car2 = new Car('Nissan', '300ZX', 1992, ken);\n",
    "car2.owner.name\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",
    "function Foo() {\n  if (!new.target) { throw 'Foo() must be called with new' }\n  console.log('Foo instantiated with new')\n}\n\nnew Foo()  // logs \"Foo instantiated with new\"\nFoo()      // throws \"Foo() must be called with new\"\n",
    "class A {\n  constructor() {\n    console.log(new.target.name)\n  }\n}\n\nclass B extends A { constructor() { super() } }\n\nlet a = new A()  // logs \"A\"\nlet b = new B()  // logs \"B\"\n\nclass C { constructor() { console.log(new.target)  } }\nclass D extends C { constructor() { super()  } }\n \nlet c = new C()  // logs class C{constructor(){console.log(new.target);}}\nlet d = new D()  // logs class D extends C{constructor(){super();}}"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
    "function myFunction(x, y, z) { }\nconst args = [0, 1, 2];\nmyFunction.apply(null, args);",
    "function myFunction(x, y, z) { }\nconst args = [0, 1, 2];\nmyFunction(...args);",
    "function myFunction(v, w, x, y, z) { }\nconst args = [0, 1];\nmyFunction(-1, ...args, 2, ...[3]);",
    "const dateFields = [1970, 0, 1];  // 1 Jan 1970\nconst d = new Date(...dateFields);\n",
    "function applyAndNew(constructor, args) {\n   function partial () {\n      return constructor.apply(this, args);\n   };\n   if (typeof constructor.prototype === \"object\") {\n      partial.prototype = Object.create(constructor.prototype);\n   }\n   return partial;\n}\n\n\nfunction myConstructor () {\n   console.log(\"arguments.length: \" + arguments.length);\n   console.log(arguments);\n   this.prop1=\"val1\";\n   this.prop2=\"val2\";\n};\n\nconst myArguments = [\"hi\", \"how\", \"are\", \"you\", \"mr\", null];\nconst myConstructorWithArguments = applyAndNew(myConstructor, myArguments);\n\nconsole.log(new myConstructorWithArguments);\n//  (internal log of myConstructor):           arguments.length: 6\n//  (internal log of myConstructor):           [\"hi\", \"how\", \"are\", \"you\", \"mr\", null]\n//  (log of \"new myConstructorWithArguments\"): {prop1: \"val1\", prop2: \"val2\"}",
    "const parts = ['shoulders', 'knees']; \nconst lyrics = ['head', ...parts, 'and', 'toes']; \n//  [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n",
    "const arr = [1, 2, 3];\nconst arr2 = [...arr]; // like arr.slice()\n\narr2.push(4);\n//  arr2 becomes [1, 2, 3, 4]\n//  arr remains unaffected\n",
    "const a = [[1], [2], [3]];\nconst b = [...a];\n\nb.shift().shift(); \n//  1\n\n//  Oh no!  Now array 'a' is affected as well:\na\n//  [[], [2], [3]]\n",
    "const arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\n//  Append all items from arr2 onto arr1\narr1 = arr1.concat(arr2);",
    "const arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\narr1 = [...arr1, ...arr2]; \n//  arr1 is now [0, 1, 2, 3, 4, 5]\n",
    "const arr1 = [0, 1, 2];\nconst arr2 = [3, 4, 5];\n\n//  Prepend all items from arr2 onto arr1\nArray.prototype.unshift.apply(arr1, arr2) \n\n//  arr1 is now [3, 4, 5, 0, 1, 2]",
    "let arr1 = [0, 1, 2];\nlet arr2 = [3, 4, 5];\n\narr1 = [...arr2, ...arr1]; \n//  arr1 is now [3, 4, 5, 0, 1, 2]\n",
    "const obj1 = { foo: 'bar', x: 42 };\nconst obj2 = { foo: 'baz', y: 13 };\n\nconst clonedObj = { ...obj1 };\n// Object { foo: \"bar\", x: 42 }\n\nconst mergedObj = { ...obj1, ...obj2 };\n// Object { foo: \"baz\", x: 42, y: 13 }",
    "let obj1 = { foo: 'bar', x: 42 };\nlet obj2 = { foo: 'baz', y: 13 };\nconst merge = ( ...objects ) => ( { ...objects } );\n\nlet mergedObj1 = merge (obj1, obj2);\n// Object { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 13 } }\n\nlet mergedObj2 = merge ({}, obj1, obj2);\n// Object { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 13 } }",
    "const obj = {'key1': 'value1'};\nconst array = [...obj]; // TypeError: obj is not iterable\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
    "var Employee = {\n  age: 28,\n  name: 'abc',\n  designation: 'developer'\n}\n\nconsole.log(delete Employee.name);   // returns true\nconsole.log(delete Employee.age);    // returns true\n\n// When trying to delete a property that does \n// not exist, true is returned \nconsole.log(delete Employee.salary); // returns true\n",
    "var Employee = {};\nObject.defineProperty(Employee, 'name', {configurable: false});\n\nconsole.log(delete Employee.name);  // returns false\n",
    "Object.defineProperty(globalThis, 'variable1', { value: 10, configurable: true, });\nObject.defineProperty(globalThis, 'variable2', { value: 10, configurable: false, });\n\n// SyntaxError in strict mode.\nconsole.log(delete variable1); // true\n\n// SyntaxError in strict mode.\nconsole.log(delete variable2); // false\n",
    "function func(param) {\n  // SyntaxError in strict mode.\n  console.log(delete param); // false\n}\n\n// SyntaxError in strict mode.\nconsole.log(delete func); // false\n",
    "function Foo() {\n  this.bar = 10;\n}\n\nFoo.prototype.bar = 42;\n\nvar foo = new Foo();\n\n// foo.bar is associated with the \n// own property. \nconsole.log(foo.bar); // 10 \n\n// Delete the own property within the \n// foo object. \ndelete foo.bar; // returns true \n\n// foo.bar is still available in the \n// prototype chain. \nconsole.log(foo.bar); // 42 \n\n// Delete the property on the prototype.\ndelete Foo.prototype.bar; // returns true \n\n// The \"bar\" property can no longer be \n// inherited from Foo since it has been \n// deleted. \nconsole.log(foo.bar); // undefined",
    "var trees = ['redwood', 'bay', 'cedar', 'oak', 'maple'];\ndelete trees[3];\nif (3 in trees) {\n    // this is not executed\n}",
    "var trees = ['redwood', 'bay', 'cedar', 'oak', 'maple'];\ntrees[3] = undefined;\nif (3 in trees) {\n    // this is executed\n}",
    "var trees = ['redwood', 'bay', 'cedar', 'oak', 'maple'];\ntrees.splice(3,1);\nconsole.log(trees); // [\"redwood\", \"bay\", \"cedar\", \"maple\"]\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
    "void 2 == '2';   // (void 2) == '2', returns false\nvoid (2 == '2'); // void (2 == '2'), returns undefined\n",
    "void function iife() {\n\n  console.log(\"Executed!\");\n\n}();\n\n// Output: \"Executed\"\n",
    "button.onclick = () => void doSomething();"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
    "// This stands since the beginning of JavaScript\ntypeof null === 'object';",
    "// All constructor functions, with the exception of the Function constructor, will always be typeof 'object'\nlet str = new String('String');\nlet num = new Number(100);\n\ntypeof str; // It will return 'object'\ntypeof num; // It will return 'object'\n\nlet func = new Function();\n\ntypeof func; // It will return 'function'\n",
    "// Parentheses can be used for determining the data type of expressions.\nlet iData = 99;\n\ntypeof iData + ' Wisen'; // 'number Wisen'\ntypeof (iData + ' Wisen'); // 'string'\n",
    "typeof /s/ === 'function'; // Chrome 1-12 Non-conform to ECMAScript 5.1\ntypeof /s/ === 'object';   // Firefox 5+  Conform to ECMAScript 5.1",
    "typeof undeclaredVariable === 'undefined';\n\ntypeof newLetVariable; // ReferenceError\ntypeof newConstVariable; // ReferenceError\ntypeof newClass; // ReferenceError\n\nlet newLetVariable;\nconst newConstVariable = 'hello';\nclass newClass{};",
    "typeof document.all === 'undefined';",
    "typeof alert === 'object'",
    "typeof window.external.AddSearchProvider === \"unknown\";\ntypeof window.external.IsSearchProviderInstalled === \"unknown\";"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators",
    "function A(){ console.log('called A'); return false; }\nfunction B(){ console.log('called B'); return true; }\n\nconsole.log( A() && B() );\n// logs \"called A\" due to the function call,\n// then logs false (which is the resulting value of the operator)\n\nconsole.log( B() || A() );\n// logs \"called B\" due to the function call,\n// then logs true (which is the resulting value of the operator)\n",
    "true || false && false      // returns true, because && is executed first\n(true || false) && false    // returns false, because operator precedence cannot apply",
    "a1 = true  && true       // t && t returns true\na2 = true  && false      // t && f returns false\na3 = false && true       // f && t returns false\na4 = false && (3 == 4)   // f && f returns false\na5 = 'Cat' && 'Dog'      // t && t returns \"Dog\"\na6 = false && 'Cat'      // f && t returns false\na7 = 'Cat' && false      // t && f returns false\na8 = ''    && false      // f && f returns \"\"\na9 = false && ''         // f && f returns false\n",
    "o1 = true  || true       // t || t returns true\no2 = false || true       // f || t returns true\no3 = true  || false      // t || f returns true\no4 = false || (3 == 4)   // f || f returns false\no5 = 'Cat' || 'Dog'      // t || t returns \"Cat\"\no6 = false || 'Cat'      // f || t returns \"Cat\"\no7 = 'Cat' || false      // t || f returns \"Cat\"\no8 = ''    || false      // f || f returns false\no9 = false || ''         // f || f returns \"\"\no10 = false || varObject // f || object returns varObject\n",
    "n1 = !true               // !t returns false\nn2 = !false              // !f returns true\nn3 = !''                 // !f returns true\nn4 = !'Cat'              // !t returns false\n",
    "bCondition1 && bCondition2",
    "!(!bCondition1 || !bCondition2)",
    "bCondition1 || bCondition2",
    "!(!bCondition1 && !bCondition2)",
    "!!bCondition",
    "bCondition",
    "bCondition1 || (bCondition2 && bCondition3)",
    "bCondition1 || bCondition2 && bCondition3",
    "bCondition1 && (bCondition2 || bCondition3)",
    "!(!bCondition1 || !bCondition2 && !bCondition3)"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Exponentiation",
    "// Number + Number -> addition\n1 + 2 // 3\n\n// Boolean + Number -> addition\ntrue + 1 // 2\n\n// Boolean + Boolean -> addition\nfalse + false // 0\n\n// Number + String -> concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\n'foo' + false // \"foofalse\"\n\n// String + String -> concatenation\n'foo' + 'bar' // \"foobar\"\n",
    "5 - 3 // 2\n3 - 5 // -2\n'foo' - 3 // NaN",
    "1 / 2      // returns 0.5 in JavaScript\n1 / 2      // returns 0 in Java \n// (neither number is explicitly a floating point number)\n\n1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n\n2.0 / 0    // returns Infinity in JavaScript\n2.0 / 0.0  // returns Infinity too\n2.0 / -0.0 // returns -Infinity in JavaScript",
    "2 * 2 // 4\n-2 * 2 // -4\nInfinity * 0 // NaN\nInfinity * Infinity // Infinity\n'foo' * 2 // NaN\n",
    "12 % 5 // 2\n-1 % 2 // -1\n1 % -2 // 1\nNaN % 2 // NaN\n1 % 2 // 1\n2 % 3 // 2\n-4 % 2 // -0\n5.5 % 2 // 1.5\n",
    "-2 ** 2; \n// 4 in Bash, -4 in other languages. \n// This is invalid in JavaScript, as the operation is ambiguous. \n\n\n-(2 ** 2); \n// -4 in JavaScript and the author's intention is unambiguous. \n",
    "2 ** 3 // 8\n3 ** 2 // 9\n3 ** 2.5 // 15.588457268119896\n10 ** -1 // 0.1\nNaN ** 2 // NaN\n\n2 ** 3 ** 2 // 512\n2 ** (3 ** 2) // 512\n(2 ** 3) ** 2 // 64\n",
    "-(2 ** 2) // -4\n",
    "(-2) ** 2 // 4\n",
    "// Postfix \nvar x = 3;\ny = x++; // y = 3, x = 4\n\n// Prefix\nvar a = 2;\nb = ++a; // a = 3, b = 3\n",
    "// Postfix \nvar x = 3;\ny = x--; // y = 3, x = 2\n\n// Prefix\nvar a = 2;\nb = --a; // a = 1, b = 1\n",
    "var x = 3;\ny = -x; // y = -3, x = 3\n\n// Unary negation operator can convert non-numbers into a number\nvar x = \"4\";\ny = -x; // y = -4\n",
    "+3     // 3\n+'3'   // 3\n+true  // 1\n+false // 0\n+null  // 0\n+function(val){ return val } // NaN\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
    "// Arrays\nlet trees = ['redwood', 'bay', 'cedar', 'oak', 'maple']\n0 in trees        // returns true\n3 in trees        // returns true\n6 in trees        // returns false\n'bay' in trees    // returns false (you must specify the index number, not the value at that index)\n'length' in trees // returns true (length is an Array property)\nSymbol.iterator in trees // returns true (arrays are iterable, works only in ES2015+)\n\n// Predefined objects\n'PI' in Math          // returns true\n\n// Custom objects\nlet mycar = {make: 'Honda', model: 'Accord', year: 1998}\n'make' in mycar  // returns true\n'model' in mycar // returns true\n",
    "let color1 = new String('green')\n'length' in color1 // returns true\n\nlet color2 = 'coral'\n// generates an error (color2 is not a String object)\n'length' in color2\n",
    "let mycar = {make: 'Honda', model: 'Accord', year: 1998}\ndelete mycar.make\n'make' in mycar   // returns false\n\nlet trees = new Array('redwood', 'bay', 'cedar', 'oak', 'maple')\ndelete trees[3]\n3 in trees  // returns false\n",
    "let mycar = {make: 'Honda', model: 'Accord', year: 1998}\nmycar.make = undefined\n'make' in mycar   // returns true\n",
    "let trees = new Array('redwood', 'bay', 'cedar', 'oak', 'maple')\ntrees[3] = undefined\n3 in trees  // returns true\n",
    "'toString' in {}  // returns true\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
    "// defining constructors\nfunction C() {}\nfunction D() {}\n\nlet o = new C()\n\n// true, because: Object.getPrototypeOf(o) === C.prototype\no instanceof C\n\n// false, because D.prototype is nowhere in o's prototype chain\no instanceof D\n\no instanceof Object           // true, because:\nC.prototype instanceof Object // true\n\nC.prototype = {} \nlet o2 = new C() \n\no2 instanceof C  // true\n\n// false, because C.prototype is nowhere in\n// o's prototype chain anymore\no instanceof C  \n\nD.prototype = new C()  // add C to [[Prototype]] linkage of D\nlet o3 = new D() \no3 instanceof D        // true\no3 instanceof C        // true since C.prototype is now in o3's prototype chain\n",
    "let simpleStr = 'This is a simple string'\nlet myString  = new String()\nlet newStr    = new String('String created with constructor')\nlet myDate    = new Date()\nlet myObj     = {}\nlet myNonObj  = Object.create(null)\n\nsimpleStr instanceof String  // returns false, string literal is not an object\nmyString  instanceof String  // returns true\nnewStr    instanceof String  // returns true\nmyString  instanceof Object  // returns true\n\nmyObj    instanceof Object   // returns true, every object literal has Object.prototype as prototype\n({})     instanceof Object   // returns true, same case as above\nmyNonObj instanceof Object   // returns false, prototype is end of prototype chain (null)\n\nmyString instanceof Date     // returns false\n\nmyDate instanceof Date      // returns true\nmyDate instanceof Object    // returns true\nmyDate instanceof String    // returns false\n",
    "function Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nlet mycar = new Car('Honda', 'Accord', 1998) \nlet a = mycar instanceof Car     // returns true\nlet b = mycar instanceof Object  // returns true\n",
    "if (!(mycar instanceof Car)) {\n  // Do something, like:\n  // mycar = new Car(mycar)\n}\n",
    "if (!mycar instanceof Car)"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_operator"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator",
    "1    ==  1         // true\n'1'  ==  1         // true\n1    == '1'        // true\n0    == false      // true\n0    == null       // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'}; \nobject1.key == object2.key //true\n0    == undefined  // false\nnull == undefined  // true\n",
    "1 !=   2     // true\n1 !=  '1'    // false\n1 !=  \"1\"    // false\n1 !=  true   // false\n0 !=  false  // false\n",
    "3 === 3   // true\n3 === '3' // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'};\nobject1 === object2 //false",
    "3 !== '3' // true\n4 !== 3   // true\n",
    "4 > 3 // true\n",
    "4 >= 3 // true\n3 >= 3 // true\n",
    "3 < 4 // true\n",
    "3 <= 4 // true\n3 <= 3 // true\n",
    "// true as both operands are type String (i.e. string primitives):\n'foo' === 'foo'\n\nvar a = new String('foo');\nvar b = new String('foo');\n\n// false as a and b are type Object and reference different objects\na == b \n\n// false as a and b are type Object and reference different objects\na === b \n\n// true as a and 'foo' are of different type and, the Object (a) \n// is converted to String 'foo' before comparison\na == 'foo'"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality",
    "1    ==  1         // true\n'1'  ==  1         // true\n1    == '1'        // true\n0    == false      // true\n0    == null       // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'}; \nobject1.key == object2.key //true\n0    == undefined  // false\nnull == undefined  // true\n",
    "1 !=   2     // true\n1 !=  '1'    // false\n1 !=  \"1\"    // false\n1 !=  true   // false\n0 !=  false  // false\n",
    "3 === 3   // true\n3 === '3' // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'};\nobject1 === object2 //false",
    "3 !== '3' // true\n4 !== 3   // true\n",
    "4 > 3 // true\n",
    "4 >= 3 // true\n3 >= 3 // true\n",
    "3 < 4 // true\n",
    "3 <= 4 // true\n3 <= 3 // true\n",
    "// true as both operands are type String (i.e. string primitives):\n'foo' === 'foo'\n\nvar a = new String('foo');\nvar b = new String('foo');\n\n// false as a and b are type Object and reference different objects\na == b \n\n// false as a and b are type Object and reference different objects\na === b \n\n// true as a and 'foo' are of different type and, the Object (a) \n// is converted to String 'foo' before comparison\na == 'foo'"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality",
    "1    ==  1         // true\n'1'  ==  1         // true\n1    == '1'        // true\n0    == false      // true\n0    == null       // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'}; \nobject1.key == object2.key //true\n0    == undefined  // false\nnull == undefined  // true\n",
    "1 !=   2     // true\n1 !=  '1'    // false\n1 !=  \"1\"    // false\n1 !=  true   // false\n0 !=  false  // false\n",
    "3 === 3   // true\n3 === '3' // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'};\nobject1 === object2 //false",
    "3 !== '3' // true\n4 !== 3   // true\n",
    "4 > 3 // true\n",
    "4 >= 3 // true\n3 >= 3 // true\n",
    "3 < 4 // true\n",
    "3 <= 4 // true\n3 <= 3 // true\n",
    "// true as both operands are type String (i.e. string primitives):\n'foo' === 'foo'\n\nvar a = new String('foo');\nvar b = new String('foo');\n\n// false as a and b are type Object and reference different objects\na == b \n\n// false as a and b are type Object and reference different objects\na === b \n\n// true as a and 'foo' are of different type and, the Object (a) \n// is converted to String 'foo' before comparison\na == 'foo'"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity",
    "1    ==  1         // true\n'1'  ==  1         // true\n1    == '1'        // true\n0    == false      // true\n0    == null       // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'}; \nobject1.key == object2.key //true\n0    == undefined  // false\nnull == undefined  // true\n",
    "1 !=   2     // true\n1 !=  '1'    // false\n1 !=  \"1\"    // false\n1 !=  true   // false\n0 !=  false  // false\n",
    "3 === 3   // true\n3 === '3' // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'};\nobject1 === object2 //false",
    "3 !== '3' // true\n4 !== 3   // true\n",
    "4 > 3 // true\n",
    "4 >= 3 // true\n3 >= 3 // true\n",
    "3 < 4 // true\n",
    "3 <= 4 // true\n3 <= 3 // true\n",
    "// true as both operands are type String (i.e. string primitives):\n'foo' === 'foo'\n\nvar a = new String('foo');\nvar b = new String('foo');\n\n// false as a and b are type Object and reference different objects\na == b \n\n// false as a and b are type Object and reference different objects\na === b \n\n// true as a and 'foo' are of different type and, the Object (a) \n// is converted to String 'foo' before comparison\na == 'foo'"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity",
    "1    ==  1         // true\n'1'  ==  1         // true\n1    == '1'        // true\n0    == false      // true\n0    == null       // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'}; \nobject1.key == object2.key //true\n0    == undefined  // false\nnull == undefined  // true\n",
    "1 !=   2     // true\n1 !=  '1'    // false\n1 !=  \"1\"    // false\n1 !=  true   // false\n0 !=  false  // false\n",
    "3 === 3   // true\n3 === '3' // false\nvar object1 = {'key': 'value'}, object2 = {'key': 'value'};\nobject1 === object2 //false",
    "3 !== '3' // true\n4 !== 3   // true\n",
    "4 > 3 // true\n",
    "4 >= 3 // true\n3 >= 3 // true\n",
    "3 < 4 // true\n",
    "3 <= 4 // true\n3 <= 3 // true\n",
    "// true as both operands are type String (i.e. string primitives):\n'foo' === 'foo'\n\nvar a = new String('foo');\nvar b = new String('foo');\n\n// false as a and b are type Object and reference different objects\na == b \n\n// false as a and b are type Object and reference different objects\na === b \n\n// true as a and 'foo' are of different type and, the Object (a) \n// is converted to String 'foo' before comparison\na == 'foo'"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators",
    "00000000000000000000000100111010\n",
    "11111111111111111111111011000101\n",
    "11111111111111111111111011000110\n",
    "0 (base 10) = 00000000000000000000000000000000 (base 2)\n",
    "-1 (base 10) = 11111111111111111111111111111111 (base 2)\n",
    "-2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n",
    "2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n",
    "Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n",
    " 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".    -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n",
    ".     9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n",
    "let flags = 5;   // binary 0101\n",
    "let FLAG_A = 1; // 0001\nlet FLAG_B = 2; // 0010\nlet FLAG_C = 4; // 0100\nlet FLAG_D = 8; // 1000\n",
    "let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n",
    "// if we own a cat\nif (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n   // do stuff\n}\n",
    "// if we own a bat or we own a cat\n// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\nif ((flags & FLAG_B) || (flags & FLAG_C)) {\n   // do stuff\n}\n",
    "// if we own a bat or cat\nlet mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\nif (flags & mask) {         // 0101 & 0110 => 0100 => true\n   // do stuff\n}\n",
    "// yes, we own a cat and a duck\nlet mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\nflags |= mask;              // 0101 | 1100 => 1101\n",
    "// no, we don't have an ant problem or own a cat\nlet mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// no, we don't have an ant problem, and we don't own a cat\nlet mask = ~FLAG_A & ~FLAG_C;\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// if we didn't have a bat, we have one now, \n// and if we did have one, bye-bye bat\n// same thing for cats\nlet mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;          // 1100 ^ 0110 => 1010\n",
    "// entering parallel universe...\nflags = ~flags;               // ~1010 => 0101\n",
    "let sBinString = '1011';\nlet nMyNumber = parseInt(sBinString, 2);\nalert(nMyNumber); // prints 11, i.e. 1011\n",
    "let nMyNumber = 11;\nlet sBinString = nMyNumber.toString(2);\nalert(sBinString); // prints 1011, i.e. 11\n",
    "function createMask() {\n  let nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n  for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n  return nMask;\n}\nlet mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\nlet mask2 = createMask(false, false, true);      //  4, i.e.: 0100\nlet mask3 = createMask(true);                    //  1, i.e.: 0001\n// etc.\n\nalert(mask1);                                    // prints 11, i.e.: 1011\n",
    "function arrayFromMask(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  if (nMask > 0x7fffffff || nMask < -0x80000000) { \n    throw new TypeError('arrayFromMask - out of range'); \n  }\n  for (let nShifted = nMask, aFromMask = []; nShifted; \n       aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n  return aFromMask;\n}\n\nlet array1 = arrayFromMask(11);\nlet array2 = arrayFromMask(4);\nlet array3 = arrayFromMask(1);\n\nalert('[' + array1.join(', ') + ']');\n// prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n",
    "let nTest = 19; // our custom mask\nlet nResult = createMask.apply(this, arrayFromMask(nTest));\n\nalert(nResult); // 19\n",
    "function createBinaryString(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  for (let nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n       nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n  return sMask;\n}\n\nlet string1 = createBinaryString(11);\nlet string2 = createBinaryString(4);\nlet string3 = createBinaryString(1);\n\nalert(string1);\n// prints 00000000000000000000000000001011, i.e. 11\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift",
    "00000000000000000000000100111010\n",
    "11111111111111111111111011000101\n",
    "11111111111111111111111011000110\n",
    "0 (base 10) = 00000000000000000000000000000000 (base 2)\n",
    "-1 (base 10) = 11111111111111111111111111111111 (base 2)\n",
    "-2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n",
    "2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n",
    "Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n",
    " 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".    -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n",
    ".     9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n",
    "let flags = 5;   // binary 0101\n",
    "let FLAG_A = 1; // 0001\nlet FLAG_B = 2; // 0010\nlet FLAG_C = 4; // 0100\nlet FLAG_D = 8; // 1000\n",
    "let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n",
    "// if we own a cat\nif (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n   // do stuff\n}\n",
    "// if we own a bat or we own a cat\n// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\nif ((flags & FLAG_B) || (flags & FLAG_C)) {\n   // do stuff\n}\n",
    "// if we own a bat or cat\nlet mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\nif (flags & mask) {         // 0101 & 0110 => 0100 => true\n   // do stuff\n}\n",
    "// yes, we own a cat and a duck\nlet mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\nflags |= mask;              // 0101 | 1100 => 1101\n",
    "// no, we don't have an ant problem or own a cat\nlet mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// no, we don't have an ant problem, and we don't own a cat\nlet mask = ~FLAG_A & ~FLAG_C;\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// if we didn't have a bat, we have one now, \n// and if we did have one, bye-bye bat\n// same thing for cats\nlet mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;          // 1100 ^ 0110 => 1010\n",
    "// entering parallel universe...\nflags = ~flags;               // ~1010 => 0101\n",
    "let sBinString = '1011';\nlet nMyNumber = parseInt(sBinString, 2);\nalert(nMyNumber); // prints 11, i.e. 1011\n",
    "let nMyNumber = 11;\nlet sBinString = nMyNumber.toString(2);\nalert(sBinString); // prints 1011, i.e. 11\n",
    "function createMask() {\n  let nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n  for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n  return nMask;\n}\nlet mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\nlet mask2 = createMask(false, false, true);      //  4, i.e.: 0100\nlet mask3 = createMask(true);                    //  1, i.e.: 0001\n// etc.\n\nalert(mask1);                                    // prints 11, i.e.: 1011\n",
    "function arrayFromMask(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  if (nMask > 0x7fffffff || nMask < -0x80000000) { \n    throw new TypeError('arrayFromMask - out of range'); \n  }\n  for (let nShifted = nMask, aFromMask = []; nShifted; \n       aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n  return aFromMask;\n}\n\nlet array1 = arrayFromMask(11);\nlet array2 = arrayFromMask(4);\nlet array3 = arrayFromMask(1);\n\nalert('[' + array1.join(', ') + ']');\n// prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n",
    "let nTest = 19; // our custom mask\nlet nResult = createMask.apply(this, arrayFromMask(nTest));\n\nalert(nResult); // 19\n",
    "function createBinaryString(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  for (let nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n       nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n  return sMask;\n}\n\nlet string1 = createBinaryString(11);\nlet string2 = createBinaryString(4);\nlet string3 = createBinaryString(1);\n\nalert(string1);\n// prints 00000000000000000000000000001011, i.e. 11\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift",
    "00000000000000000000000100111010\n",
    "11111111111111111111111011000101\n",
    "11111111111111111111111011000110\n",
    "0 (base 10) = 00000000000000000000000000000000 (base 2)\n",
    "-1 (base 10) = 11111111111111111111111111111111 (base 2)\n",
    "-2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n",
    "2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n",
    "Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n",
    " 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".    -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n",
    ".     9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n",
    "let flags = 5;   // binary 0101\n",
    "let FLAG_A = 1; // 0001\nlet FLAG_B = 2; // 0010\nlet FLAG_C = 4; // 0100\nlet FLAG_D = 8; // 1000\n",
    "let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n",
    "// if we own a cat\nif (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n   // do stuff\n}\n",
    "// if we own a bat or we own a cat\n// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\nif ((flags & FLAG_B) || (flags & FLAG_C)) {\n   // do stuff\n}\n",
    "// if we own a bat or cat\nlet mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\nif (flags & mask) {         // 0101 & 0110 => 0100 => true\n   // do stuff\n}\n",
    "// yes, we own a cat and a duck\nlet mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\nflags |= mask;              // 0101 | 1100 => 1101\n",
    "// no, we don't have an ant problem or own a cat\nlet mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// no, we don't have an ant problem, and we don't own a cat\nlet mask = ~FLAG_A & ~FLAG_C;\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// if we didn't have a bat, we have one now, \n// and if we did have one, bye-bye bat\n// same thing for cats\nlet mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;          // 1100 ^ 0110 => 1010\n",
    "// entering parallel universe...\nflags = ~flags;               // ~1010 => 0101\n",
    "let sBinString = '1011';\nlet nMyNumber = parseInt(sBinString, 2);\nalert(nMyNumber); // prints 11, i.e. 1011\n",
    "let nMyNumber = 11;\nlet sBinString = nMyNumber.toString(2);\nalert(sBinString); // prints 1011, i.e. 11\n",
    "function createMask() {\n  let nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n  for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n  return nMask;\n}\nlet mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\nlet mask2 = createMask(false, false, true);      //  4, i.e.: 0100\nlet mask3 = createMask(true);                    //  1, i.e.: 0001\n// etc.\n\nalert(mask1);                                    // prints 11, i.e.: 1011\n",
    "function arrayFromMask(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  if (nMask > 0x7fffffff || nMask < -0x80000000) { \n    throw new TypeError('arrayFromMask - out of range'); \n  }\n  for (let nShifted = nMask, aFromMask = []; nShifted; \n       aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n  return aFromMask;\n}\n\nlet array1 = arrayFromMask(11);\nlet array2 = arrayFromMask(4);\nlet array3 = arrayFromMask(1);\n\nalert('[' + array1.join(', ') + ']');\n// prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n",
    "let nTest = 19; // our custom mask\nlet nResult = createMask.apply(this, arrayFromMask(nTest));\n\nalert(nResult); // 19\n",
    "function createBinaryString(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  for (let nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n       nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n  return sMask;\n}\n\nlet string1 = createBinaryString(11);\nlet string2 = createBinaryString(4);\nlet string3 = createBinaryString(1);\n\nalert(string1);\n// prints 00000000000000000000000000001011, i.e. 11\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND",
    "00000000000000000000000100111010\n",
    "11111111111111111111111011000101\n",
    "11111111111111111111111011000110\n",
    "0 (base 10) = 00000000000000000000000000000000 (base 2)\n",
    "-1 (base 10) = 11111111111111111111111111111111 (base 2)\n",
    "-2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n",
    "2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n",
    "Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n",
    " 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".    -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n",
    ".     9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n",
    "let flags = 5;   // binary 0101\n",
    "let FLAG_A = 1; // 0001\nlet FLAG_B = 2; // 0010\nlet FLAG_C = 4; // 0100\nlet FLAG_D = 8; // 1000\n",
    "let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n",
    "// if we own a cat\nif (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n   // do stuff\n}\n",
    "// if we own a bat or we own a cat\n// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\nif ((flags & FLAG_B) || (flags & FLAG_C)) {\n   // do stuff\n}\n",
    "// if we own a bat or cat\nlet mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\nif (flags & mask) {         // 0101 & 0110 => 0100 => true\n   // do stuff\n}\n",
    "// yes, we own a cat and a duck\nlet mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\nflags |= mask;              // 0101 | 1100 => 1101\n",
    "// no, we don't have an ant problem or own a cat\nlet mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// no, we don't have an ant problem, and we don't own a cat\nlet mask = ~FLAG_A & ~FLAG_C;\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// if we didn't have a bat, we have one now, \n// and if we did have one, bye-bye bat\n// same thing for cats\nlet mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;          // 1100 ^ 0110 => 1010\n",
    "// entering parallel universe...\nflags = ~flags;               // ~1010 => 0101\n",
    "let sBinString = '1011';\nlet nMyNumber = parseInt(sBinString, 2);\nalert(nMyNumber); // prints 11, i.e. 1011\n",
    "let nMyNumber = 11;\nlet sBinString = nMyNumber.toString(2);\nalert(sBinString); // prints 1011, i.e. 11\n",
    "function createMask() {\n  let nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n  for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n  return nMask;\n}\nlet mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\nlet mask2 = createMask(false, false, true);      //  4, i.e.: 0100\nlet mask3 = createMask(true);                    //  1, i.e.: 0001\n// etc.\n\nalert(mask1);                                    // prints 11, i.e.: 1011\n",
    "function arrayFromMask(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  if (nMask > 0x7fffffff || nMask < -0x80000000) { \n    throw new TypeError('arrayFromMask - out of range'); \n  }\n  for (let nShifted = nMask, aFromMask = []; nShifted; \n       aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n  return aFromMask;\n}\n\nlet array1 = arrayFromMask(11);\nlet array2 = arrayFromMask(4);\nlet array3 = arrayFromMask(1);\n\nalert('[' + array1.join(', ') + ']');\n// prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n",
    "let nTest = 19; // our custom mask\nlet nResult = createMask.apply(this, arrayFromMask(nTest));\n\nalert(nResult); // 19\n",
    "function createBinaryString(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  for (let nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n       nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n  return sMask;\n}\n\nlet string1 = createBinaryString(11);\nlet string2 = createBinaryString(4);\nlet string3 = createBinaryString(1);\n\nalert(string1);\n// prints 00000000000000000000000000001011, i.e. 11\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR",
    "00000000000000000000000100111010\n",
    "11111111111111111111111011000101\n",
    "11111111111111111111111011000110\n",
    "0 (base 10) = 00000000000000000000000000000000 (base 2)\n",
    "-1 (base 10) = 11111111111111111111111111111111 (base 2)\n",
    "-2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n",
    "2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n",
    "Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n",
    " 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".    -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n",
    ".     9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n",
    "let flags = 5;   // binary 0101\n",
    "let FLAG_A = 1; // 0001\nlet FLAG_B = 2; // 0010\nlet FLAG_C = 4; // 0100\nlet FLAG_D = 8; // 1000\n",
    "let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n",
    "// if we own a cat\nif (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n   // do stuff\n}\n",
    "// if we own a bat or we own a cat\n// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\nif ((flags & FLAG_B) || (flags & FLAG_C)) {\n   // do stuff\n}\n",
    "// if we own a bat or cat\nlet mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\nif (flags & mask) {         // 0101 & 0110 => 0100 => true\n   // do stuff\n}\n",
    "// yes, we own a cat and a duck\nlet mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\nflags |= mask;              // 0101 | 1100 => 1101\n",
    "// no, we don't have an ant problem or own a cat\nlet mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// no, we don't have an ant problem, and we don't own a cat\nlet mask = ~FLAG_A & ~FLAG_C;\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// if we didn't have a bat, we have one now, \n// and if we did have one, bye-bye bat\n// same thing for cats\nlet mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;          // 1100 ^ 0110 => 1010\n",
    "// entering parallel universe...\nflags = ~flags;               // ~1010 => 0101\n",
    "let sBinString = '1011';\nlet nMyNumber = parseInt(sBinString, 2);\nalert(nMyNumber); // prints 11, i.e. 1011\n",
    "let nMyNumber = 11;\nlet sBinString = nMyNumber.toString(2);\nalert(sBinString); // prints 1011, i.e. 11\n",
    "function createMask() {\n  let nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n  for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n  return nMask;\n}\nlet mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\nlet mask2 = createMask(false, false, true);      //  4, i.e.: 0100\nlet mask3 = createMask(true);                    //  1, i.e.: 0001\n// etc.\n\nalert(mask1);                                    // prints 11, i.e.: 1011\n",
    "function arrayFromMask(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  if (nMask > 0x7fffffff || nMask < -0x80000000) { \n    throw new TypeError('arrayFromMask - out of range'); \n  }\n  for (let nShifted = nMask, aFromMask = []; nShifted; \n       aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n  return aFromMask;\n}\n\nlet array1 = arrayFromMask(11);\nlet array2 = arrayFromMask(4);\nlet array3 = arrayFromMask(1);\n\nalert('[' + array1.join(', ') + ']');\n// prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n",
    "let nTest = 19; // our custom mask\nlet nResult = createMask.apply(this, arrayFromMask(nTest));\n\nalert(nResult); // 19\n",
    "function createBinaryString(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  for (let nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n       nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n  return sMask;\n}\n\nlet string1 = createBinaryString(11);\nlet string2 = createBinaryString(4);\nlet string3 = createBinaryString(1);\n\nalert(string1);\n// prints 00000000000000000000000000001011, i.e. 11\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR",
    "00000000000000000000000100111010\n",
    "11111111111111111111111011000101\n",
    "11111111111111111111111011000110\n",
    "0 (base 10) = 00000000000000000000000000000000 (base 2)\n",
    "-1 (base 10) = 11111111111111111111111111111111 (base 2)\n",
    "-2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n",
    "2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n",
    "Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n",
    ".    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n",
    " 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n",
    ".    9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".    -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n",
    ".     9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n",
    ".     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n",
    "let flags = 5;   // binary 0101\n",
    "let FLAG_A = 1; // 0001\nlet FLAG_B = 2; // 0010\nlet FLAG_C = 4; // 0100\nlet FLAG_D = 8; // 1000\n",
    "let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n",
    "// if we own a cat\nif (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n   // do stuff\n}\n",
    "// if we own a bat or we own a cat\n// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\nif ((flags & FLAG_B) || (flags & FLAG_C)) {\n   // do stuff\n}\n",
    "// if we own a bat or cat\nlet mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\nif (flags & mask) {         // 0101 & 0110 => 0100 => true\n   // do stuff\n}\n",
    "// yes, we own a cat and a duck\nlet mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\nflags |= mask;              // 0101 | 1100 => 1101\n",
    "// no, we don't have an ant problem or own a cat\nlet mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// no, we don't have an ant problem, and we don't own a cat\nlet mask = ~FLAG_A & ~FLAG_C;\nflags &= mask;                 // 1101 & 1010 => 1000\n",
    "// if we didn't have a bat, we have one now, \n// and if we did have one, bye-bye bat\n// same thing for cats\nlet mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;          // 1100 ^ 0110 => 1010\n",
    "// entering parallel universe...\nflags = ~flags;               // ~1010 => 0101\n",
    "let sBinString = '1011';\nlet nMyNumber = parseInt(sBinString, 2);\nalert(nMyNumber); // prints 11, i.e. 1011\n",
    "let nMyNumber = 11;\nlet sBinString = nMyNumber.toString(2);\nalert(sBinString); // prints 1011, i.e. 11\n",
    "function createMask() {\n  let nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n  for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n  return nMask;\n}\nlet mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\nlet mask2 = createMask(false, false, true);      //  4, i.e.: 0100\nlet mask3 = createMask(true);                    //  1, i.e.: 0001\n// etc.\n\nalert(mask1);                                    // prints 11, i.e.: 1011\n",
    "function arrayFromMask(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  if (nMask > 0x7fffffff || nMask < -0x80000000) { \n    throw new TypeError('arrayFromMask - out of range'); \n  }\n  for (let nShifted = nMask, aFromMask = []; nShifted; \n       aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n  return aFromMask;\n}\n\nlet array1 = arrayFromMask(11);\nlet array2 = arrayFromMask(4);\nlet array3 = arrayFromMask(1);\n\nalert('[' + array1.join(', ') + ']');\n// prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n",
    "let nTest = 19; // our custom mask\nlet nResult = createMask.apply(this, arrayFromMask(nTest));\n\nalert(nResult); // 19\n",
    "function createBinaryString(nMask) {\n  // nMask must be between -2147483648 and 2147483647\n  for (let nFlag = 0, nShifted = nMask, sMask = ''; nFlag < 32;\n       nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n  return sMask;\n}\n\nlet string1 = createBinaryString(11);\nlet string2 = createBinaryString(4);\nlet string3 = createBinaryString(1);\n\nalert(string1);\n// prints 00000000000000000000000000001011, i.e. 11\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR",
    "function A(){ console.log('called A'); return false; }\nfunction B(){ console.log('called B'); return true; }\n\nconsole.log( A() && B() );\n// logs \"called A\" due to the function call,\n// then logs false (which is the resulting value of the operator)\n\nconsole.log( B() || A() );\n// logs \"called B\" due to the function call,\n// then logs true (which is the resulting value of the operator)\n",
    "true || false && false      // returns true, because && is executed first\n(true || false) && false    // returns false, because operator precedence cannot apply",
    "a1 = true  && true       // t && t returns true\na2 = true  && false      // t && f returns false\na3 = false && true       // f && t returns false\na4 = false && (3 == 4)   // f && f returns false\na5 = 'Cat' && 'Dog'      // t && t returns \"Dog\"\na6 = false && 'Cat'      // f && t returns false\na7 = 'Cat' && false      // t && f returns false\na8 = ''    && false      // f && f returns \"\"\na9 = false && ''         // f && f returns false\n",
    "o1 = true  || true       // t || t returns true\no2 = false || true       // f || t returns true\no3 = true  || false      // t || f returns true\no4 = false || (3 == 4)   // f || f returns false\no5 = 'Cat' || 'Dog'      // t || t returns \"Cat\"\no6 = false || 'Cat'      // f || t returns \"Cat\"\no7 = 'Cat' || false      // t || f returns \"Cat\"\no8 = ''    || false      // f || f returns false\no9 = false || ''         // f || f returns \"\"\no10 = false || varObject // f || object returns varObject\n",
    "n1 = !true               // !t returns false\nn2 = !false              // !f returns true\nn3 = !''                 // !f returns true\nn4 = !'Cat'              // !t returns false\n",
    "bCondition1 && bCondition2",
    "!(!bCondition1 || !bCondition2)",
    "bCondition1 || bCondition2",
    "!(!bCondition1 && !bCondition2)",
    "!!bCondition",
    "bCondition",
    "bCondition1 || (bCondition2 && bCondition3)",
    "bCondition1 || bCondition2 && bCondition3",
    "bCondition1 && (bCondition2 || bCondition3)",
    "!(!bCondition1 || !bCondition2 && !bCondition3)"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
    "var age = 26;\nvar beverage = (age >= 21) ? \"Beer\" : \"Juice\";\nconsole.log(beverage); // \"Beer\"\n",
    "function greeting(person) {\n    var name = person ? person.name : \"stranger\";\n    return \"Howdy, \" + name;\n}\n\nconsole.log(greeting({name: 'Alice'}));  // \"Howdy, Alice\"\nconsole.log(greeting(null));             // \"Howdy, stranger\"\n",
    "function example(…) {\n    return condition1 ? value1\n         : condition2 ? value2\n         : condition3 ? value3\n         : value4;\n}\n\n// Equivalent to:\n\nfunction example(…) {\n    if (condition1) { return value1; }\n    else if (condition2) { return value2; }\n    else if (condition3) { return value3; }\n    else { return value4; }\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Multiplication_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Division_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Remainder_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Addition_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Subtraction_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Left_shift_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Right_shift_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Unsigned_right_shift_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_AND_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_OR_assignment",
    "// Assuming the following variables\n//  x = 5\n//  y = 10\n//  z = 25\n\nx = y     // x is 10\nx = y = z // x, y and z are all 25\n",
    "// Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n\n// Number + Number -> addition\nbar += 2 // 7\n\n// Boolean + Number -> addition\nbaz += 1 // 2\n\n// Boolean + Boolean -> addition\nbaz += false // 1\n\n// Number + String -> concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -> concatenation\nfoo += false // \"foofalse\"\n\n// String + String -> concatenation\nfoo += 'bar' // \"foobar\"\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar -= 2     // 3\nbar -= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar *= 2     // 10\nbar *= 'foo' // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar /= 2     // 2.5\nbar /= 'foo' // NaN\nbar /= 0     // Infinity\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar %= 2     // 1\nbar %= 'foo' // NaN\nbar %= 0     // NaN\n",
    "// Assuming the following variable\n//  bar = 5\n\nbar **= 2     // 25\nbar **= 'foo' // NaN",
    "var bar = 5; //  (00000000000000000000000000000101)\nbar <<= 2; // 20 (00000000000000000000000000010100)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>= 2;   // 1 (00000000000000000000000000000001)\n\nvar bar = -5; //    (-00000000000000000000000000000101)\nbar >>= 2;  // -2 (-00000000000000000000000000000010)\n",
    "var bar = 5; //   (00000000000000000000000000000101)\nbar >>>= 2;  // 1 (00000000000000000000000000000001)\n\nvar bar = -5; // (-00000000000000000000000000000101)\nbar >>>= 2; // 1073741822 (00111111111111111111111111111110)",
    "var bar = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\nbar &= 2; // 0\n",
    "var bar = 5;\nbar ^= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "var bar = 5;\nbar |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n",
    "a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
    "let a, b, rest;\n[a, b] = [10, 20];\nconsole.log(a); // 10\nconsole.log(b); // 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // [30, 40, 50]\n\n({ a, b } = { a: 10, b: 20 });\nconsole.log(a); // 10\nconsole.log(b); // 20\n\n\n// Stage 4(finished) proposal\n({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // {c: 30, d: 40}\n",
    "const x = [1, 2, 3, 4, 5];",
    "const x = [1, 2, 3, 4, 5];\nconst [y, z] = x;\nconsole.log(y); // 1\nconsole.log(z); // 2\n",
    "const foo = ['one', 'two', 'three'];\n\nconst [red, yellow, green] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // \"three\"\n",
    "let a, b;\n\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n",
    "let a, b;\n\n[a=5, b=7] = [1];\nconsole.log(a); // 1\nconsole.log(b); // 7\n",
    "let a = 1;\nlet b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n\nconst arr = [1,2,3];\n[arr[2], arr[1]] = [arr[1], arr[2]];\nconsole.log(arr); // [1,3,2]\n\n",
    "function f() {\n  return [1, 2];\n}\n\nlet a, b; \n[a, b] = f(); \nconsole.log(a); // 1\nconsole.log(b); // 2\n",
    "function f() {\n  return [1, 2, 3];\n}\n\nconst [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n",
    "[,,] = f();\n",
    "const [a, ...b] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // [2, 3]",
    "const [a, ...b,] = [1, 2, 3];\n\n// SyntaxError: rest element may not have a trailing comma\n// Always consider using rest operator as the last element \n",
    "function parseProtocol(url) { \n  const parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url);\n  if (!parsedURL) {\n    return false;\n  }\n  console.log(parsedURL); // [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]\n\n  const [, protocol, fullhost, fullpath] = parsedURL;\n  return protocol;\n}\n\nconsole.log(parseProtocol('https://developer.mozilla.org/en-US/Web/JavaScript')); // \"https\"\n",
    "const o = {p: 42, q: true};\nconst {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true \n",
    "let a, b;\n\n({a, b} = {a: 1, b: 2});",
    "const o = {p: 42, q: true};\nconst {p: foo, q: bar} = o;\n \nconsole.log(foo); // 42 \nconsole.log(bar); // true",
    "const {a = 10, b = 5} = {a: 3};\n\nconsole.log(a); // 3\nconsole.log(b); // 5",
    "const {a: aa = 10, b: bb = 5} = {a: 3};\n\nconsole.log(aa); // 3\nconsole.log(bb); // 5\n",
    "const user = {\n  id: 42,\n  displayName: 'jdoe',\n  fullName: {\n    firstName: 'John',\n    lastName: 'Doe'\n  }\n};\n\nfunction userId({id}) {\n  return id;\n}\n\nfunction whois({displayName, fullName: {firstName: name}}) {\n  return `${displayName} is ${name}`;\n}\n\nconsole.log(userId(user)); // 42\nconsole.log(whois(user));  // \"jdoe is John\"",
    "function drawChart({size = 'big', coords = {x: 0, y: 0}, radius = 25} = {}) {\n  console.log(size, coords, radius);\n  // do some chart drawing\n}\n\ndrawChart({\n  coords: {x: 18, y: 30},\n  radius: 30\n});",
    "const metadata = {\n  title: 'Scratchpad',\n  translations: [\n    {\n      locale: 'de',\n      localization_tags: [],\n      last_edit: '2014-04-14T08:43:37',\n      url: '/de/docs/Tools/Scratchpad',\n      title: 'JavaScript-Umgebung'\n    }\n  ],\n  url: '/en-US/docs/Tools/Scratchpad'\n};\n\nlet {\n  title: englishTitle, // rename\n  translations: [\n    {\n       title: localeTitle, // rename\n    },\n  ],\n} = metadata;\n\nconsole.log(englishTitle); // \"Scratchpad\"\nconsole.log(localeTitle);  // \"JavaScript-Umgebung\"",
    "const people = [\n  {\n    name: 'Mike Smith',\n    family: {\n      mother: 'Jane Smith',\n      father: 'Harry Smith',\n      sister: 'Samantha Smith'\n    },\n    age: 35\n  },\n  {\n    name: 'Tom Jones',\n    family: {\n      mother: 'Norah Jones',\n      father: 'Richard Jones',\n      brother: 'Howard Jones'\n    },\n    age: 25\n  }\n];\n\nfor (const {name: n, family: {father: f}} of people) {\n  console.log('Name: ' + n + ', Father: ' + f);\n}\n\n// \"Name: Mike Smith, Father: Harry Smith\"\n// \"Name: Tom Jones, Father: Richard Jones\"\n",
    "let key = 'z';\nlet {[key]: foo} = {z: 'bar'};\n\nconsole.log(foo); // \"bar\"\n",
    "let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}\na; // 10 \nb; // 20 \nrest; // { c: 30, d: 40 }",
    "const foo = { 'fizz-buzz': true };\nconst { 'fizz-buzz': fizzBuzz } = foo;\n\nconsole.log(fizzBuzz); // \"true\"\n",
    "const props = [\n  { id: 1, name: 'Fizz'},\n  { id: 2, name: 'Buzz'},\n  { id: 3, name: 'FizzBuzz'}\n];\n\nconst [,, { name }] = props;\n\nconsole.log(name); // \"FizzBuzz\"\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
    "let a, b, rest;\n[a, b] = [10, 20];\nconsole.log(a); // 10\nconsole.log(b); // 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // [30, 40, 50]\n\n({ a, b } = { a: 10, b: 20 });\nconsole.log(a); // 10\nconsole.log(b); // 20\n\n\n// Stage 4(finished) proposal\n({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // {c: 30, d: 40}\n",
    "const x = [1, 2, 3, 4, 5];",
    "const x = [1, 2, 3, 4, 5];\nconst [y, z] = x;\nconsole.log(y); // 1\nconsole.log(z); // 2\n",
    "const foo = ['one', 'two', 'three'];\n\nconst [red, yellow, green] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // \"three\"\n",
    "let a, b;\n\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n",
    "let a, b;\n\n[a=5, b=7] = [1];\nconsole.log(a); // 1\nconsole.log(b); // 7\n",
    "let a = 1;\nlet b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n\nconst arr = [1,2,3];\n[arr[2], arr[1]] = [arr[1], arr[2]];\nconsole.log(arr); // [1,3,2]\n\n",
    "function f() {\n  return [1, 2];\n}\n\nlet a, b; \n[a, b] = f(); \nconsole.log(a); // 1\nconsole.log(b); // 2\n",
    "function f() {\n  return [1, 2, 3];\n}\n\nconst [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n",
    "[,,] = f();\n",
    "const [a, ...b] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // [2, 3]",
    "const [a, ...b,] = [1, 2, 3];\n\n// SyntaxError: rest element may not have a trailing comma\n// Always consider using rest operator as the last element \n",
    "function parseProtocol(url) { \n  const parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url);\n  if (!parsedURL) {\n    return false;\n  }\n  console.log(parsedURL); // [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]\n\n  const [, protocol, fullhost, fullpath] = parsedURL;\n  return protocol;\n}\n\nconsole.log(parseProtocol('https://developer.mozilla.org/en-US/Web/JavaScript')); // \"https\"\n",
    "const o = {p: 42, q: true};\nconst {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true \n",
    "let a, b;\n\n({a, b} = {a: 1, b: 2});",
    "const o = {p: 42, q: true};\nconst {p: foo, q: bar} = o;\n \nconsole.log(foo); // 42 \nconsole.log(bar); // true",
    "const {a = 10, b = 5} = {a: 3};\n\nconsole.log(a); // 3\nconsole.log(b); // 5",
    "const {a: aa = 10, b: bb = 5} = {a: 3};\n\nconsole.log(aa); // 3\nconsole.log(bb); // 5\n",
    "const user = {\n  id: 42,\n  displayName: 'jdoe',\n  fullName: {\n    firstName: 'John',\n    lastName: 'Doe'\n  }\n};\n\nfunction userId({id}) {\n  return id;\n}\n\nfunction whois({displayName, fullName: {firstName: name}}) {\n  return `${displayName} is ${name}`;\n}\n\nconsole.log(userId(user)); // 42\nconsole.log(whois(user));  // \"jdoe is John\"",
    "function drawChart({size = 'big', coords = {x: 0, y: 0}, radius = 25} = {}) {\n  console.log(size, coords, radius);\n  // do some chart drawing\n}\n\ndrawChart({\n  coords: {x: 18, y: 30},\n  radius: 30\n});",
    "const metadata = {\n  title: 'Scratchpad',\n  translations: [\n    {\n      locale: 'de',\n      localization_tags: [],\n      last_edit: '2014-04-14T08:43:37',\n      url: '/de/docs/Tools/Scratchpad',\n      title: 'JavaScript-Umgebung'\n    }\n  ],\n  url: '/en-US/docs/Tools/Scratchpad'\n};\n\nlet {\n  title: englishTitle, // rename\n  translations: [\n    {\n       title: localeTitle, // rename\n    },\n  ],\n} = metadata;\n\nconsole.log(englishTitle); // \"Scratchpad\"\nconsole.log(localeTitle);  // \"JavaScript-Umgebung\"",
    "const people = [\n  {\n    name: 'Mike Smith',\n    family: {\n      mother: 'Jane Smith',\n      father: 'Harry Smith',\n      sister: 'Samantha Smith'\n    },\n    age: 35\n  },\n  {\n    name: 'Tom Jones',\n    family: {\n      mother: 'Norah Jones',\n      father: 'Richard Jones',\n      brother: 'Howard Jones'\n    },\n    age: 25\n  }\n];\n\nfor (const {name: n, family: {father: f}} of people) {\n  console.log('Name: ' + n + ', Father: ' + f);\n}\n\n// \"Name: Mike Smith, Father: Harry Smith\"\n// \"Name: Tom Jones, Father: Richard Jones\"\n",
    "let key = 'z';\nlet {[key]: foo} = {z: 'bar'};\n\nconsole.log(foo); // \"bar\"\n",
    "let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}\na; // 10 \nb; // 20 \nrest; // { c: 30, d: 40 }",
    "const foo = { 'fizz-buzz': true };\nconst { 'fizz-buzz': fizzBuzz } = foo;\n\nconsole.log(fizzBuzz); // \"true\"\n",
    "const props = [\n  { id: 1, name: 'Fizz'},\n  { id: 2, name: 'Buzz'},\n  { id: 3, name: 'FizzBuzz'}\n];\n\nconst [,, { name }] = props;\n\nconsole.log(name); // \"FizzBuzz\"\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
    "arguments[0] // first argument\narguments[1] // second argument\narguments[2] // third argument\n",
    "arguments[1] = 'new value';\n",
    "var args = Array.prototype.slice.call(arguments);\n// Using an array literal is shorter than above but allocates an empty array\nvar args = [].slice.call(arguments); \n",
    "let args = Array.from(arguments);\n// or\nlet args = [...arguments];\n",
    "function longestString() {\n  var longest = '';\n  for (var i=0; i < arguments.length; i++) {\n    if (arguments[i].length > longest.length) {\n      longest = arguments[i];\n    }\n  }\n  return longest;\n}\n",
    "console.log(typeof arguments); // 'object' ",
    "function myConcat(separator) {\n  let args = Array.prototype.slice.call(arguments, 1);\n  return args.join(separator);\n}",
    "// returns \"red, orange, blue\"\nmyConcat(', ', 'red', 'orange', 'blue');\n\n// returns \"elephant; giraffe; lion; cheetah\"\nmyConcat('; ', 'elephant', 'giraffe', 'lion', 'cheetah');\n\n// returns \"sage. basil. oregano. pepper. parsley\"\nmyConcat('. ', 'sage', 'basil', 'oregano', 'pepper', 'parsley');",
    "let listHTML = list('u', 'One', 'Two', 'Three');\n\n/* listHTML is:\n\"<ul><li>One</li><li>Two</li><li>Three</li></ul>\"\n*/",
    "function foo(...args) {\n  return args;\n}\nfoo(1, 2, 3); // [1, 2, 3]\n",
    "function func(a) { \n  arguments[0] = 99; // updating arguments[0] also updates a\n  console.log(a);\n}\nfunc(10); // 99\n",
    "function func(a) { \n  a = 99; // updating a also updates arguments[0]\n  console.log(arguments[0]);\n}\nfunc(10); // 99\n",
    "function func(a = 55) { \n  arguments[0] = 99; // updating arguments[0] does not also update a\n  console.log(a);\n}\nfunc(10); // 10",
    "function func(a = 55) { \n  a = 99; // updating a does not also update arguments[0]\n  console.log(arguments[0]);\n}\nfunc(10); // 10\n",
    "// An untracked default parameter\nfunction func(a = 55) { \n  console.log(arguments[0]);\n}\nfunc(); // undefined"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
    "function Person() {\n  // The Person() constructor defines `this` as an instance of itself.\n  this.age = 0;\n\n  setInterval(function growUp() {\n    // In non-strict mode, the growUp() function defines `this`\n    // as the global object (because it's where growUp() is executed.), \n    // which is different from the `this`\n    // defined by the Person() constructor.\n    this.age++;\n  }, 1000);\n}\n\nvar p = new Person();",
    "function Person() {\n  var that = this;\n  that.age = 0;\n\n  setInterval(function growUp() {\n    // The callback refers to the `that` variable of which\n    // the value is the expected object.\n    that.age++;\n  }, 1000);\n}",
    "function Person(){\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // |this| properly refers to the Person object\n  }, 1000);\n}\n\nvar p = new Person();",
    "var f = () => { 'use strict'; return this; };\nf() === window; // or the global object",
    "var adder = {\n  base: 1,\n\n  add: function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base: 2\n    };\n\n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // This would log 2\nconsole.log(adder.addThruCall(1)); // This would log 2 still",
    "function foo(n) { \n  var f = (...args) => args[0] + n;\n  return f(10); \n}\n\nfoo(1); // 11",
    "'use strict';\n\nvar obj = { // does not create a new scope\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function() {\n    console.log(this.i, this);\n  }\n}\n\nobj.b(); // prints undefined, Window {...} (or the global object)\nobj.c(); // prints 10, Object {...}",
    "'use strict';\n\nvar obj = {\n  a: 10\n};\n\nObject.defineProperty(obj, 'b', {\n  get: () => {\n    console.log(this.a, typeof this.a, this); // undefined 'undefined' Window {...} (or the global object)\n    return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'\n  }\n});\n",
    "var Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor",
    "var Foo = () => {};\nconsole.log(Foo.prototype); // undefined\n",
    "var func = x => x * x;                  \n// concise body syntax, implied \"return\"\n\nvar func = (x, y) => { return x + y; }; \n// with block body, explicit \"return\" needed\n",
    "var func = () => { foo: 1 };\n// Calling func() returns undefined!\n\nvar func = () => { foo: function() {} };\n// SyntaxError: function statement requires a name",
    "var func = () => ({ foo: 1 });",
    "var func = (a, b, c)\n  => 1;\n// SyntaxError: expected expression, got '=>'",
    "var func = (a, b, c) =>\n  1;\n\nvar func = (a, b, c) => (\n  1\n);\n\nvar func = (a, b, c) => {\n  return 1\n};\n\nvar func = (\n  a,\n  b,\n  c\n) => 1;\n \n// no SyntaxError thrown",
    "let callback;\n\ncallback = callback || function() {}; // ok\n\ncallback = callback || () => {};\n// SyntaxError: invalid arrow-function arguments\n\ncallback = callback || (() => {});    // ok\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters",
    "function multiply(a, b) {\n  return a * b\n}\n\nmultiply(5, 2)  // 10\nmultiply(5)     // NaN !\n",
    "function multiply(a, b) {\n  b = (typeof b !== 'undefined') ?  b : 1\n  return a * b\n}\n\nmultiply(5, 2)  // 10\nmultiply(5)     // 5\n",
    "function multiply(a, b = 1) {\n  return a * b \n}\n\nmultiply(5, 2)          // 10\nmultiply(5)             // 5\nmultiply(5, undefined)  // 5\n",
    "function test(num = 1) {\n  console.log(typeof num)\n}\n\ntest()           // 'number' (num is set to 1)\ntest(undefined)  // 'number' (num is set to 1 too)\n\n// test with other falsy values:\ntest('')         // 'string' (num is set to '')\ntest(null)       // 'object' (num is set to null)\n",
    "function append(value, array = []) {\n  array.push(value)\n  return array\n}\n\nappend(1)  // [1]\nappend(2)  // [2], not [1, 2]\n",
    "function callSomething(thing = something()) {\n  return thing\n}\n\nlet numberOfTimesCalled = 0\nfunction something() {\n  numberOfTimesCalled += 1\n  return numberOfTimesCalled\n}\n\ncallSomething()  // 1\ncallSomething()  // 2\n",
    "function greet(name, greeting, message = greeting + ' ' + name) {\n  return [name, greeting, message]\n}\n\ngreet('David', 'Hi')                     // [\"David\", \"Hi\", \"Hi David\"]\ngreet('David', 'Hi', 'Happy Birthday!')  // [\"David\", \"Hi\", \"Happy Birthday!\"]\n",
    "function go() {\n  return ':P'\n}\n\nfunction withDefaults(a, b = 5, c = b, d = go(), e = this, \n                      f = arguments, g = this.value) {\n  return [a, b, c, d, e, f, g]\n}\n\nfunction withoutDefaults(a, b, c, d, e, f, g) {\n  switch (arguments.length) {\n    case 0:\n      a;\n    case 1:\n      b = 5;\n    case 2:\n      c = b;\n    case 3:\n      d = go();\n    case 4:\n      e = this;\n    case 5:\n      f = arguments;\n    case 6:\n      g = this.value;\n    default:\n  }\n  return [a, b, c, d, e, f, g];\n}\n\nwithDefaults.call({value: '=^_^='});\n// [undefined, 5, 5, \":P\", {value:\"=^_^=\"}, arguments, \"=^_^=\"]\n\nwithoutDefaults.call({value: '=^_^='});\n// [undefined, 5, 5, \":P\", {value:\"=^_^=\"}, arguments, \"=^_^=\"]\n",
    "// Doesn't work! Throws a ReferenceError.\nfunction f(a = go()) {\n  function go() { return ':P' }\n}\n",
    "function f(x = 1, y) { \n  return [x, y]  \n}\n\nf()   // [1, undefined]\nf(2)  // [2, undefined]\n",
    "function f([x, y] = [1, 2], {z: z} = {z: 3}) { \n  return x + y + z\n}\n\nf()  // 6"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",
    "// Before rest parameters, \"arguments\" could be converted to a normal array using:\n\nfunction f(a, b) {\n\n  let normalArray = Array.prototype.slice.call(arguments)\n  // -- or --\n  let normalArray = [].slice.call(arguments)\n  // -- or --\n  let normalArray = Array.from(arguments)\n\n  let first = normalArray.shift()  // OK, gives the first argument\n  let first = arguments.shift()    // ERROR (arguments is not a normal array)\n}\n\n// Now, you can easily gain access to a normal array using a rest parameter\n\nfunction f(...args) {\n  let normalArray = args\n  let first = normalArray.shift() // OK, gives the first argument\n}\n",
    "function f(...[a, b, c]) {\n  return a + b + c;\n}\n\nf(1)          // NaN (b and c are undefined)\nf(1, 2, 3)    // 6\nf(1, 2, 3, 4) // 6 (the fourth parameter is not destructured)\n",
    "function f(a, b, c) {\n  return a + b + c\n}\n\nf(1)          // NaN (b and c are undefined)\nf(1, 2, 3)    // 6\nf(1, 2, 3, 4) // 6 (the fourth parameter is not ...)\n",
    "function myFun(a, b, ...manyMoreArgs) {\n  console.log(\"a\", a)\n  console.log(\"b\", b)\n  console.log(\"manyMoreArgs\", manyMoreArgs)\n}\n\nmyFun(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n\n// a, one\n// b, two\n// manyMoreArgs, [three, four, five, six]\n",
    "// using the same function definition from example above\n\nmyFun(\"one\", \"two\", \"three\")\n\n// a, one\n// b, two\n// manyMoreArgs, [three]",
    "// using the same function definition from example above\n\nmyFun(\"one\", \"two\")\n\n// a, one\n// b, two\n// manyMoreArgs, []",
    "function fun1(...theArgs) {\n  console.log(theArgs.length)\n}\n\nfun1()         // 0\nfun1(5)        // 1\nfun1(5, 6, 7)  // 3\n",
    "function multiply(multiplier, ...theArgs) {\n  return theArgs.map(function(element) {\n    return multiplier * element\n  })\n}\n\nlet arr = multiply(2, 1, 2, 3)\nconsole.log(arr)  // [2, 4, 6]\n",
    "function sortRestArgs(...theArgs) {\n  let sortedArgs = theArgs.sort()\n  return sortedArgs\n}\n\nconsole.log(sortRestArgs(5, 3, 7, 1)) // 1, 3, 5, 7\n\nfunction sortArguments() {\n  let sortedArgs = arguments.sort()\n  return sortedArgs  // this will never happen\n}\n\n\nconsole.log(sortArguments(5, 3, 7, 1))  \n// throws a TypeError (arguments.sort is not a function)\n",
    "function sortArguments() {\n  let args = Array.from(arguments)\n  let sortedArgs = args.sort()\n  return sortedArgs\n}\nconsole.log(sortArguments(5, 3, 7, 1))  // 1, 3, 5, 7\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar",
    "function comment() {\n  // This is a one line JavaScript comment\n  console.log('Hello world!');\n}\ncomment();\n",
    "function comment() {\n  /* This is a one line JavaScript comment */\n  console.log('Hello world!');\n}\ncomment();",
    "function comment() {\n  /* This comment spans multiple lines. Notice\n     that we don't need to end the comment until we're done. */\n  console.log('Hello world!');\n}\ncomment();",
    "function comment(x) {\n  console.log('Hello ' + x /* insert the value of x */ + ' !');\n}\ncomment('world');",
    "function comment() {\n  /* console.log('Hello world!'); */\n}\ncomment();",
    "#!/usr/bin/env node\n\nconsole.log(\"Hello world\");\n",
    "a.import\na['import']\na = { import: 'test' }.\n",
    "function import() {} // Illegal.",
    "null",
    "true\nfalse",
    "1234567890\n42\n\n// Caution when using with a leading zero:\n0888 // 888 parsed as decimal\n0777 // parsed as octal, 511 in decimal\n",
    "var FLT_SIGNBIT  = 0b10000000000000000000000000000000; // 2147483648\nvar FLT_EXPONENT = 0b01111111100000000000000000000000; // 2139095040\nvar FLT_MANTISSA = 0B00000000011111111111111111111111; // 8388607",
    "var n = 0O755; // 493\nvar m = 0o644; // 420\n\n// Also possible with just a leading zero (see note about decimals above)\n0755\n0644\n",
    "0xFFFFFFFFFFFFFFFFF // 295147905179352830000\n0x123456789ABCDEF   // 81985529216486900\n0XA                 // 10\n",
    "123456789123456789n     // 123456789123456789\n0o777777777777n         // 68719476735\n0x123456789ABCDEFn      // 81985529216486895‬\n0b11101001010101010101n // 955733\n",
    "// 0755n\n// SyntaxError: invalid BigInt syntax",
    "0o755n",
    "// separators in decimal numbers\n1_000_000_000_000\n1_050.95\n\n// separators in binary numbers\n0b1010_0001_1000_0101\n\n// separators in octal numbers\n0o2_2_5_6\n\n// separators in hex numbers\n0xA0_B0_C0\n\n// separators in BigInts\n1_000_000_000_000_000_000_000n\n",
    "// More than one underscore in a row is not allowed\n100__000; // SyntaxError\n\n// Not allowed at the end of numeric literals\n100_; // SyntaxError\n\n// Can not be used after leading 0\n0_1; // SyntaxError\n",
    "var o = { a: 'foo', b: 'bar', c: 42 };\n\n// shorthand notation. New in ES2015\nvar a = 'foo', b = 'bar', c = 42;\nvar o = {a, b, c};\n\n// instead of\nvar o = { a: a, b: b, c: c };\n",
    "[1954, 1974, 1990, 2014]",
    "'foo'\n\"bar\"",
    "'\\xA9' // \"©\"\n",
    "'\\u00A9' // \"©\" (U+A9)",
    "'\\u{2F804}' // CJK COMPATIBILITY IDEOGRAPH-2F804 (U+2F804)\n\n// the same character represented as a surrogate pair\n'\\uD87E\\uDC04'",
    "/ab+c/g\n\n// An \"empty\" regular expression literal\n// The empty non-capturing group is necessary \n// to avoid ambiguity with single-line comments.\n/(?:)/",
    "`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`",
    "{ 1 2 } 3 \n\n// is transformed by ASI into \n\n{ 1 2 ;} 3;",
    "a = b\n++c\n\n// is transformend by ASI into\n\na = b;\n++c;\n",
    "return\na + b\n\n// is transformed by ASI into\n\nreturn;\na + b;\n"
  ],
  ["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",
    "// Whole-script strict mode syntax\n'use strict';\nvar v = \"Hi! I'm a strict mode script!\";\n",
    "function strict() {\n  // Function-level strict mode syntax\n  'use strict';\n  function nested() { return 'And so am I!'; }\n  return \"Hi!  I'm a strict mode function!  \" + nested();\n}\nfunction notStrict() { return \"I'm not strict.\"; }\n",
    "function strict() {\n    // because this is a module, I'm strict by default\n}\nexport default strict;\n",
    "'use strict';\n                       // Assuming no global variable mistypedVariable exists\nmistypeVariable = 17;  // this line throws a ReferenceError due to the \n                       // misspelling of variable\n",
    "'use strict';\n\n// Assignment to a non-writable global\nvar undefined = 5; // throws a TypeError\nvar Infinity = 5; // throws a TypeError\n\n// Assignment to a non-writable property\nvar obj1 = {};\nObject.defineProperty(obj1, 'x', { value: 42, writable: false });\nobj1.x = 9; // throws a TypeError\n\n// Assignment to a getter-only property\nvar obj2 = { get x() { return 17; } };\nobj2.x = 5; // throws a TypeError\n\n// Assignment to a new property on a non-extensible object\nvar fixed = {};\nObject.preventExtensions(fixed);\nfixed.newProp = 'ohai'; // throws a TypeError\n",
    "'use strict';\ndelete Object.prototype; // throws a TypeError\n",
    "'use strict';\nvar o = { p: 1, p: 2 }; // !!! syntax error\n",
    "function sum(a, a, c) { // !!! syntax error\n  'use strict';\n  return a + a + c; // wrong if this code ran\n}\n",
    "var a = 0o10; // ES2015: Octal",
    "'use strict';\nvar sum = 015 + // !!! syntax error\n          197 +\n          142;\n\nvar sumWithOctal = 0o10 + 8;\nconsole.log(sumWithOctal); // 16\n",
    "(function() {\n'use strict';\n\nfalse.true = '';         // TypeError\n(14).sailing = 'home';   // TypeError\n'with'.you = 'far away'; // TypeError\n\n})();",
    "'use strict';\nvar x = 17;\nwith (obj) { // !!! syntax error\n  // If this weren't strict mode, would this be var x, or\n  // would it instead be obj.x?  It's impossible in general\n  // to say without running the code, so the name can't be\n  // optimized.\n  x;\n}\n",
    "var x = 17;\nvar evalX = eval(\"'use strict'; var x = 42; x;\");\nconsole.assert(x === 17);\nconsole.assert(evalX === 42);\n",
    "function strict1(str) {\n  'use strict';\n  return eval(str); // str will be treated as strict mode code\n}\nfunction strict2(f, str) {\n  'use strict';\n  return f(str); // not eval(...): str is strict if and only\n                 // if it invokes strict mode\n}\nfunction nonstrict(str) {\n  return eval(str); // str is strict if and only \n                    // if it invokes strict mode\n}\n\nstrict1(\"'Strict mode code!'\");\nstrict1(\"'use strict'; 'Strict mode code!'\");\nstrict2(eval, \"'Non-strict code.'\");\nstrict2(eval, \"'use strict'; 'Strict mode code!'\");\nnonstrict(\"'Non-strict code.'\");\nnonstrict(\"'use strict'; 'Strict mode code!'\");\n",
    "'use strict';\n\nvar x;\ndelete x; // !!! syntax error\n\neval('var y; delete y;'); // !!! syntax error",
    "'use strict';\neval = 17;\narguments++;\n++eval;\nvar obj = { set p(arguments) { } };\nvar eval;\ntry { } catch (arguments) { }\nfunction x(eval) { }\nfunction arguments() { }\nvar y = function eval() { };\nvar f = new Function('arguments', \"'use strict'; return 17;\");\n",
    "function f(a) {\n  'use strict';\n  a = 42;\n  return [a, arguments[0]];\n}\nvar pair = f(17);\nconsole.assert(pair[0] === 42);\nconsole.assert(pair[1] === 17);\n",
    "'use strict';\nvar f = function() { return arguments.callee; };\nf(); // throws a TypeError\n",
    "'use strict';\nfunction fun() { return this; }\nconsole.assert(fun() === undefined);\nconsole.assert(fun.call(2) === 2);\nconsole.assert(fun.apply(null) === null);\nconsole.assert(fun.call(undefined) === undefined);\nconsole.assert(fun.bind(true)() === true);\n",
    "function restricted() {\n  'use strict';\n  restricted.caller;    // throws a TypeError\n  restricted.arguments; // throws a TypeError\n}\nfunction privilegedInvoker() {\n  return restricted();\n}\nprivilegedInvoker();\n",
    "'use strict';\nfunction fun(a, b) {\n  'use strict';\n  var v = 12;\n  return arguments.caller; // throws a TypeError\n}\nfun(1, 2); // doesn't expose v (or a or b)\n",
    "function package(protected) { // !!!\n  'use strict';\n  var implements; // !!!\n\n  interface: // !!!\n  while (true) {\n    break interface; // !!!\n  }\n\n  function private() { } // !!!\n}\nfunction fun(static) { 'use strict'; } // !!!\n\n",
    "'use strict';\nif (true) {\n  function f() { } // !!! syntax error\n  f();\n}\n\nfor (var i = 0; i < 5; i++) {\n  function f2() { } // !!! syntax error\n  f2();\n}\n\nfunction baz() { // kosher\n  function eit() { } // also kosher\n}\n"
  ],
  [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features"
  ]
]
